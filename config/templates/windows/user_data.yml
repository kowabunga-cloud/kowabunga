# Force cloud-init re-execution
# PS1> Remove-Item -Recurse "HKLM:\\Software\Cloudbase Solutions"

<powershell>
#Function to create the new local user first
function New-LocalUser {
    [CmdletBinding()]
    [Alias()]
    [OutputType([int])]
    Param
    (
        # Param1 help description
        [Parameter(Mandatory=$true,
                   ValueFromPipelineByPropertyName=$true,
                   Position=0)]
        $userName,
        # Param2 help description
        [string]
        $password
    )

    $system = [ADSI]"WinNT://$env:COMPUTERNAME";
    $user = $system.Create("user",$userName);
    $user.SetPassword($password);
    $user.SetInfo();

    $flag=$user.UserFlags.value -bor 0x10000;
    $user.put("userflags",$flag);
    $user.SetInfo();

    $group = [ADSI]("WinNT://$env:COMPUTERNAME/Users");
    $group.PSBase.Invoke("Add", $user.PSBase.Path);
}

#function to register a native method
function Register-NativeMethod {
    [CmdletBinding()]
    [Alias()]
    [OutputType([int])]
    Param
    (
        # Param1 help description
        [Parameter(Mandatory=$true,
                   ValueFromPipelineByPropertyName=$true,
                   Position=0)]
        [string]$dll,

        # Param2 help description
        [Parameter(Mandatory=$true,
                   ValueFromPipelineByPropertyName=$true,
                   Position=1)]
        [string]
        $methodSignature
    )

    $script:nativeMethods += [PSCustomObject]@{ Dll = $dll; Signature = $methodSignature; }
}

function Get-Win32LastError {
    [CmdletBinding()]
    [Alias()]
    [OutputType([int])]
    Param($typeName = 'LastError')
 if (-not ([System.Management.Automation.PSTypeName]$typeName).Type)
    {
    $lasterrorCode = $script:lasterror | ForEach-Object{
        '[DllImport("kernel32.dll", SetLastError = true)]
         public static extern uint GetLastError();'
    }
        Add-Type @"
        using System;
        using System.Text;
        using System.Runtime.InteropServices;
        public static class $typeName {
            $lasterrorCode
        }
"@
    }
}

#function to add native method
function Add-NativeMethods {
    [CmdletBinding()]
    [Alias()]
    [OutputType([int])]
    Param($typeName = 'NativeMethods')

    $nativeMethodsCode = $script:nativeMethods | ForEach-Object { "
        [DllImport(`"$($_.Dll)`")]
        public static extern $($_.Signature);
    " }

    Add-Type @"
        using System;
        using System.Text;
        using System.Runtime.InteropServices;
        public static class $typeName {
            $nativeMethodsCode
        }
"@
}

#Main function to create the new user profile
function Create-NewProfile {

    [CmdletBinding()]
    [Alias()]
    [OutputType([int])]
    Param
    (
        # Param1 help description
        [Parameter(Mandatory=$true,
                   ValueFromPipelineByPropertyName=$true,
                   Position=0)]
        [string]$UserName,

        # Param2 help description
        [Parameter(Mandatory=$true,
                   ValueFromPipelineByPropertyName=$true,
                   Position=1)]
        [string]
        $Password
    )

    Write-Verbose "Creating local user $Username";

    try {
        New-LocalUser -username $UserName -password $Password;
    }
    catch {
        Write-Error $_.Exception.Message;
        break;
    }
    $methodName = 'UserEnvCP'
    $script:nativeMethods = @();

    if (-not ([System.Management.Automation.PSTypeName]$MethodName).Type)
    {
        Register-NativeMethod "userenv.dll" "int CreateProfile([MarshalAs(UnmanagedType.LPWStr)] string pszUserSid,`
         [MarshalAs(UnmanagedType.LPWStr)] string pszUserName,`
         [Out][MarshalAs(UnmanagedType.LPWStr)] StringBuilder pszProfilePath, uint cchProfilePath)";
        Add-NativeMethods -typeName $MethodName;
    }

    $localUser = New-Object System.Security.Principal.NTAccount("$UserName");
    $userSID = $localUser.Translate([System.Security.Principal.SecurityIdentifier]);
    $sb = new-object System.Text.StringBuilder(260);
    $pathLen = $sb.Capacity;

    Write-Verbose "Creating user profile for $Username";

    try
    {
        [UserEnvCP]::CreateProfile($userSID.Value, $Username, $sb, $pathLen) | Out-Null;
    }
    catch
    {
        Write-Error $_.Exception.Message;
        break;
    }
}

Function Parse-SecPol($CfgFile){
    secedit /export /cfg "$CfgFile" | out-null
    $obj = New-Object psobject
    $index = 0
    $contents = Get-Content $CfgFile -raw
    [regex]::Matches($contents,"(?<=\[)(.*)(?=\])") | %{
        $title = $_
        [regex]::Matches($contents,"(?<=\]).*?((?=\[)|(\Z))", [System.Text.RegularExpressions.RegexOptions]::Singleline)[$index] | %{
            $section = new-object psobject
            $_.value -split "\r\n" | ?{$_.length -gt 0} | %{
                $value = [regex]::Match($_,"(?<=\=).*").value
                $name = [regex]::Match($_,".*(?=\=)").value
                $section | add-member -MemberType NoteProperty -Name $name.tostring().trim() -Value $value.tostring().trim() -ErrorAction SilentlyContinue | out-null
            }
            $obj | Add-Member -MemberType NoteProperty -Name $title -Value $section
        }
        $index += 1
    }
    return $obj
}

Function Set-SecPol($Object, $CfgFile){
   $SecPool.psobject.Properties.GetEnumerator() | %{
        "[$($_.Name)]"
        $_.Value | %{
            $_.psobject.Properties.GetEnumerator() | %{
                "$($_.Name)=$($_.Value)"
            }
        }
    } | out-file $CfgFile -ErrorAction Stop
    secedit /configure /db c:\windows\security\local.sdb /cfg "$CfgFile" /areas SECURITYPOLICY
}

Function CreateOrUpdateUser($User, $Pass, $PubKey) {
    $username = "$User"
    $password = ConvertTo-SecureString "$Pass" -AsPlainText -Force
    $op = Get-LocalUser | where-Object Name -eq "$username" | Measure
    if ($op.Count -eq 0) {
        Write-Output "Creating user $username ..."
        Create-NewProfile -Username "$username" -Password $password

        Write-Output "Add user $username to admin group ..."
        Add-LocalGroupMember -Group Administrators -Member $username
    }
    Write-Output "Updating user $username ..."
    $UserAccount = Get-LocalUser -Name "$username"
    $UserAccount | Set-LocalUser -Password $password

    Write-Output "Set user $username SSH pubkey ..."
    $authorizedKey = "$PubKey"
    $sid = (Get-LocalUser $username).Sid
    $userDir = Get-ItemPropertyValue "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\ProfileList\$sid" -Name ProfileImagePath
    New-Item -Force -ItemType Directory -Path $userDir\.ssh
    Add-Content -Force -Path $userDir\.ssh\authorized_keys -Value $authorizedKey
}

Add-Type -AssemblyName System.IO.Compression.FileSystem
Function Unzip {
    param([string]$zipfile, [string]$outpath)
    [System.IO.Compression.ZipFile]::ExtractToDirectory($zipfile, $outpath)
}

Import-Module NetSecurity

Write-Output "Add routes"
{{- range $adapterName, $subnet  := .InterfacesSubnet }}
$ADAPTER_ID=Get-NetAdapter -Name {{ $adapterName }} | Select-Object -Property ifIndex
    {{- range $k, $v := $subnet.Routes }}
New-NetRoute -DestinationPrefix {{ $v }} -InterfaceIndex $ADAPTER_ID.ifIndex -NextHop {{ $subnet.Gateway }}
    {{- end }}
{{- end }}
Write-Output "Enable in/out ICMP ..."
Set-NetFirewallRule -DisplayName "File and Printer Sharing (Echo Request - ICMPv4-In)" -Enabled True
Set-NetFirewallRule -DisplayName "File and Printer Sharing (Echo Request - ICMPv4-Out)" -Enabled True

Write-Output "Installing NuGet ..."
Install-PackageProvider NuGet -Force
Invoke-WebRequest https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -OutFile "C:\Windows\Nuget.exe"

Write-Output "Installing Paket ..."
Invoke-WebRequest https://github.com/fsprojects/Paket/releases/download/9.0.2/paket.exe -OutFile "C:\Windows\paket.exe"

Write-Output "Installing psexec ..."
Invoke-WebRequest https://download.sysinternals.com/files/PSTools.zip -Outfile "C:\Windows\temp\PsTools.zip"
Unzip "C:\Windows\temp\PsTools.zip" "C:\Windows\system32"
Install-Module -Name psexec -Confirm:$false -Force

Write-Output "Installing OpenSSH ..."
Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0
Set-Service -Name sshd -StartupType 'Automatic'
Start-Service sshd

Write-Output "Authorize OpenSSH public key authentication ..."
$sshd_config="C:\ProgramData\ssh\sshd_config"
(Get-Content $sshd_config) -replace '#PubkeyAuthentication', 'PubkeyAuthentication' | Out-File -encoding ASCII $sshd_config
(Get-Content $sshd_config) -replace 'AuthorizedKeysFile __PROGRAMDATA__', '#AuthorizedKeysFile __PROGRAMDATA__' | Out-File -encoding ASCII $sshd_config
(Get-Content $sshd_config) -replace 'Match Group administrators', '#Match Group administrators' | Out-File -encoding ASCII $sshd_config

Write-Output "Set PowerShell as SSH default shell ..."
New-ItemProperty -Path "HKLM:\SOFTWARE\OpenSSH" -Name DefaultShell -Value "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" -PropertyType String -Force

Write-Output "Allow SSH traffic ..."
if (!(Get-NetFirewallRule -Name "OpenSSH-Server-In-TCP" -ErrorAction SilentlyContinue | Select-Object Name, Enabled)) {
    Write-Output "Firewall Rule 'OpenSSH-Server-In-TCP' does not exist, creating it..."
    New-NetFirewallRule -Name 'OpenSSH-Server-In-TCP' -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22
}

Write-Output "Reload SSH service ..."
Restart-Service sshd

Write-Output "Set domain's password security policy ..."
$secPoolFile = "C:\secpol.cfg"
$SecPool = Parse-SecPol -CfgFile $secPoolFile
$SecPool.'System Access'.PasswordComplexity = 0
$SecPool.'System Access'.MinimumPasswordLength = 5
$SecPool.'System Access'.MaximumPasswordAge = 3650
Set-SecPol -Object $SecPool -CfgFile $secPoolFile
rm $secPoolFile

CreateOrUpdateUser -User "Admin" -Pass "{{ .RootPassword }}" -PubKey "{{ .ServiceUserPubKey }}"
CreateOrUpdateUser -User "{{ .ServiceUser }}" -Pass "{{ .RootPassword }}" -PubKey "{{ .ServiceUserPubKey }}"

$hostname = [System.Net.DNS]::GetHostByName('').HostName
if ($hostname -ne '{{ .Hostname }}') {
    Write-Output "Configuring hostname to {{ .Hostname }} ..."
    Rename-Computer -NewName "{{ .Hostname }}" -Force -Restart
}

</powershell>
