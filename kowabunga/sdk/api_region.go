// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Kowabunga API
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.53.1
 * Contact: maintainers@kowabunga.cloud
 */

package sdk

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// RegionAPIController binds http requests to an api service and writes the service results to the http response
type RegionAPIController struct {
	service RegionAPIServicer
	errorHandler ErrorHandler
}

// RegionAPIOption for how the controller is set up.
type RegionAPIOption func(*RegionAPIController)

// WithRegionAPIErrorHandler inject ErrorHandler into controller
func WithRegionAPIErrorHandler(h ErrorHandler) RegionAPIOption {
	return func(c *RegionAPIController) {
		c.errorHandler = h
	}
}

// NewRegionAPIController creates a default api controller
func NewRegionAPIController(s RegionAPIServicer, opts ...RegionAPIOption) *RegionAPIController {
	controller := &RegionAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RegionAPIController
func (c *RegionAPIController) Routes() Routes {
	return Routes{
		"ListRegions": Route{
			"ListRegions",
			strings.ToUpper("Get"),
			"/api/v1/region",
			c.ListRegions,
		},
		"CreateRegion": Route{
			"CreateRegion",
			strings.ToUpper("Post"),
			"/api/v1/region",
			c.CreateRegion,
		},
		"ReadRegion": Route{
			"ReadRegion",
			strings.ToUpper("Get"),
			"/api/v1/region/{regionId}",
			c.ReadRegion,
		},
		"UpdateRegion": Route{
			"UpdateRegion",
			strings.ToUpper("Put"),
			"/api/v1/region/{regionId}",
			c.UpdateRegion,
		},
		"DeleteRegion": Route{
			"DeleteRegion",
			strings.ToUpper("Delete"),
			"/api/v1/region/{regionId}",
			c.DeleteRegion,
		},
		"CreateZone": Route{
			"CreateZone",
			strings.ToUpper("Post"),
			"/api/v1/region/{regionId}/zone",
			c.CreateZone,
		},
		"ListRegionZones": Route{
			"ListRegionZones",
			strings.ToUpper("Get"),
			"/api/v1/region/{regionId}/zones",
			c.ListRegionZones,
		},
		"CreateStoragePool": Route{
			"CreateStoragePool",
			strings.ToUpper("Post"),
			"/api/v1/region/{regionId}/pool",
			c.CreateStoragePool,
		},
		"CreateKiwi": Route{
			"CreateKiwi",
			strings.ToUpper("Post"),
			"/api/v1/region/{regionId}/kiwi",
			c.CreateKiwi,
		},
		"ListRegionKiwis": Route{
			"ListRegionKiwis",
			strings.ToUpper("Get"),
			"/api/v1/region/{regionId}/kiwis",
			c.ListRegionKiwis,
		},
		"CreateVNet": Route{
			"CreateVNet",
			strings.ToUpper("Post"),
			"/api/v1/region/{regionId}/vnet",
			c.CreateVNet,
		},
		"ListRegionVNets": Route{
			"ListRegionVNets",
			strings.ToUpper("Get"),
			"/api/v1/region/{regionId}/vnets",
			c.ListRegionVNets,
		},
		"SetRegionDefaultStoragePool": Route{
			"SetRegionDefaultStoragePool",
			strings.ToUpper("Patch"),
			"/api/v1/region/{regionId}/pool/{poolId}/default",
			c.SetRegionDefaultStoragePool,
		},
		"ListRegionStoragePools": Route{
			"ListRegionStoragePools",
			strings.ToUpper("Get"),
			"/api/v1/region/{regionId}/pools",
			c.ListRegionStoragePools,
		},
		"ListRegionStorageNFSs": Route{
			"ListRegionStorageNFSs",
			strings.ToUpper("Get"),
			"/api/v1/region/{regionId}/nfs",
			c.ListRegionStorageNFSs,
		},
		"CreateStorageNFS": Route{
			"CreateStorageNFS",
			strings.ToUpper("Post"),
			"/api/v1/region/{regionId}/nfs",
			c.CreateStorageNFS,
		},
		"SetRegionDefaultStorageNFS": Route{
			"SetRegionDefaultStorageNFS",
			strings.ToUpper("Patch"),
			"/api/v1/region/{regionId}/nfs/{nfsId}/default",
			c.SetRegionDefaultStorageNFS,
		},
		"CreateRegionDnsRecord": Route{
			"CreateRegionDnsRecord",
			strings.ToUpper("Post"),
			"/api/v1/region/{regionId}/record",
			c.CreateRegionDnsRecord,
		},
		"ListRegionDnsRecords": Route{
			"ListRegionDnsRecords",
			strings.ToUpper("Get"),
			"/api/v1/region/{regionId}/records",
			c.ListRegionDnsRecords,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the RegionAPIController
func (c *RegionAPIController) OrderedRoutes() []Route {
	return []Route{
		Route{
			"ListRegions",
			strings.ToUpper("Get"),
			"/api/v1/region",
			c.ListRegions,
		},
		Route{
			"CreateRegion",
			strings.ToUpper("Post"),
			"/api/v1/region",
			c.CreateRegion,
		},
		Route{
			"ReadRegion",
			strings.ToUpper("Get"),
			"/api/v1/region/{regionId}",
			c.ReadRegion,
		},
		Route{
			"UpdateRegion",
			strings.ToUpper("Put"),
			"/api/v1/region/{regionId}",
			c.UpdateRegion,
		},
		Route{
			"DeleteRegion",
			strings.ToUpper("Delete"),
			"/api/v1/region/{regionId}",
			c.DeleteRegion,
		},
		Route{
			"CreateZone",
			strings.ToUpper("Post"),
			"/api/v1/region/{regionId}/zone",
			c.CreateZone,
		},
		Route{
			"ListRegionZones",
			strings.ToUpper("Get"),
			"/api/v1/region/{regionId}/zones",
			c.ListRegionZones,
		},
		Route{
			"CreateStoragePool",
			strings.ToUpper("Post"),
			"/api/v1/region/{regionId}/pool",
			c.CreateStoragePool,
		},
		Route{
			"CreateKiwi",
			strings.ToUpper("Post"),
			"/api/v1/region/{regionId}/kiwi",
			c.CreateKiwi,
		},
		Route{
			"ListRegionKiwis",
			strings.ToUpper("Get"),
			"/api/v1/region/{regionId}/kiwis",
			c.ListRegionKiwis,
		},
		Route{
			"CreateVNet",
			strings.ToUpper("Post"),
			"/api/v1/region/{regionId}/vnet",
			c.CreateVNet,
		},
		Route{
			"ListRegionVNets",
			strings.ToUpper("Get"),
			"/api/v1/region/{regionId}/vnets",
			c.ListRegionVNets,
		},
		Route{
			"SetRegionDefaultStoragePool",
			strings.ToUpper("Patch"),
			"/api/v1/region/{regionId}/pool/{poolId}/default",
			c.SetRegionDefaultStoragePool,
		},
		Route{
			"ListRegionStoragePools",
			strings.ToUpper("Get"),
			"/api/v1/region/{regionId}/pools",
			c.ListRegionStoragePools,
		},
		Route{
			"ListRegionStorageNFSs",
			strings.ToUpper("Get"),
			"/api/v1/region/{regionId}/nfs",
			c.ListRegionStorageNFSs,
		},
		Route{
			"CreateStorageNFS",
			strings.ToUpper("Post"),
			"/api/v1/region/{regionId}/nfs",
			c.CreateStorageNFS,
		},
		Route{
			"SetRegionDefaultStorageNFS",
			strings.ToUpper("Patch"),
			"/api/v1/region/{regionId}/nfs/{nfsId}/default",
			c.SetRegionDefaultStorageNFS,
		},
		Route{
			"CreateRegionDnsRecord",
			strings.ToUpper("Post"),
			"/api/v1/region/{regionId}/record",
			c.CreateRegionDnsRecord,
		},
		Route{
			"ListRegionDnsRecords",
			strings.ToUpper("Get"),
			"/api/v1/region/{regionId}/records",
			c.ListRegionDnsRecords,
		},
	}
}



// ListRegions - 
func (c *RegionAPIController) ListRegions(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListRegions(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateRegion - 
func (c *RegionAPIController) CreateRegion(w http.ResponseWriter, r *http.Request) {
	var regionParam Region
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&regionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRegionRequired(regionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRegionConstraints(regionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateRegion(r.Context(), regionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadRegion - 
func (c *RegionAPIController) ReadRegion(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	regionIdParam := params["regionId"]
	if regionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"regionId"}, nil)
		return
	}
	result, err := c.service.ReadRegion(r.Context(), regionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateRegion - 
func (c *RegionAPIController) UpdateRegion(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	regionIdParam := params["regionId"]
	if regionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"regionId"}, nil)
		return
	}
	var regionParam Region
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&regionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRegionRequired(regionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRegionConstraints(regionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateRegion(r.Context(), regionIdParam, regionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteRegion - 
func (c *RegionAPIController) DeleteRegion(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	regionIdParam := params["regionId"]
	if regionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"regionId"}, nil)
		return
	}
	result, err := c.service.DeleteRegion(r.Context(), regionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateZone - 
func (c *RegionAPIController) CreateZone(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	regionIdParam := params["regionId"]
	if regionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"regionId"}, nil)
		return
	}
	var zoneParam Zone
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&zoneParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertZoneRequired(zoneParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertZoneConstraints(zoneParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateZone(r.Context(), regionIdParam, zoneParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListRegionZones - 
func (c *RegionAPIController) ListRegionZones(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	regionIdParam := params["regionId"]
	if regionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"regionId"}, nil)
		return
	}
	result, err := c.service.ListRegionZones(r.Context(), regionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateStoragePool - 
func (c *RegionAPIController) CreateStoragePool(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	regionIdParam := params["regionId"]
	if regionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"regionId"}, nil)
		return
	}
	var storagePoolParam StoragePool
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&storagePoolParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertStoragePoolRequired(storagePoolParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertStoragePoolConstraints(storagePoolParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateStoragePool(r.Context(), regionIdParam, storagePoolParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateKiwi - 
func (c *RegionAPIController) CreateKiwi(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	regionIdParam := params["regionId"]
	if regionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"regionId"}, nil)
		return
	}
	var kiwiParam Kiwi
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&kiwiParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKiwiRequired(kiwiParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKiwiConstraints(kiwiParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateKiwi(r.Context(), regionIdParam, kiwiParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListRegionKiwis - 
func (c *RegionAPIController) ListRegionKiwis(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	regionIdParam := params["regionId"]
	if regionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"regionId"}, nil)
		return
	}
	result, err := c.service.ListRegionKiwis(r.Context(), regionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateVNet - 
func (c *RegionAPIController) CreateVNet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	regionIdParam := params["regionId"]
	if regionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"regionId"}, nil)
		return
	}
	var vNetParam VNet
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&vNetParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertVNetRequired(vNetParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertVNetConstraints(vNetParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateVNet(r.Context(), regionIdParam, vNetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListRegionVNets - 
func (c *RegionAPIController) ListRegionVNets(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	regionIdParam := params["regionId"]
	if regionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"regionId"}, nil)
		return
	}
	result, err := c.service.ListRegionVNets(r.Context(), regionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetRegionDefaultStoragePool - 
func (c *RegionAPIController) SetRegionDefaultStoragePool(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	regionIdParam := params["regionId"]
	if regionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"regionId"}, nil)
		return
	}
	poolIdParam := params["poolId"]
	if poolIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"poolId"}, nil)
		return
	}
	result, err := c.service.SetRegionDefaultStoragePool(r.Context(), regionIdParam, poolIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListRegionStoragePools - 
func (c *RegionAPIController) ListRegionStoragePools(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	regionIdParam := params["regionId"]
	if regionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"regionId"}, nil)
		return
	}
	result, err := c.service.ListRegionStoragePools(r.Context(), regionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListRegionStorageNFSs - 
func (c *RegionAPIController) ListRegionStorageNFSs(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	regionIdParam := params["regionId"]
	if regionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"regionId"}, nil)
		return
	}
	var poolIdParam string
	if query.Has("poolId") {
		param := query.Get("poolId")

		poolIdParam = param
	} else {
	}
	result, err := c.service.ListRegionStorageNFSs(r.Context(), regionIdParam, poolIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateStorageNFS - 
func (c *RegionAPIController) CreateStorageNFS(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	regionIdParam := params["regionId"]
	if regionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"regionId"}, nil)
		return
	}
	var storageNfsParam StorageNfs
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&storageNfsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertStorageNfsRequired(storageNfsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertStorageNfsConstraints(storageNfsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var poolIdParam string
	if query.Has("poolId") {
		param := query.Get("poolId")

		poolIdParam = param
	} else {
	}
	result, err := c.service.CreateStorageNFS(r.Context(), regionIdParam, storageNfsParam, poolIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetRegionDefaultStorageNFS - 
func (c *RegionAPIController) SetRegionDefaultStorageNFS(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	regionIdParam := params["regionId"]
	if regionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"regionId"}, nil)
		return
	}
	nfsIdParam := params["nfsId"]
	if nfsIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"nfsId"}, nil)
		return
	}
	result, err := c.service.SetRegionDefaultStorageNFS(r.Context(), regionIdParam, nfsIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateRegionDnsRecord - 
func (c *RegionAPIController) CreateRegionDnsRecord(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	regionIdParam := params["regionId"]
	if regionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"regionId"}, nil)
		return
	}
	var dnsRecordParam DnsRecord
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&dnsRecordParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDnsRecordRequired(dnsRecordParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDnsRecordConstraints(dnsRecordParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateRegionDnsRecord(r.Context(), regionIdParam, dnsRecordParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListRegionDnsRecords - 
func (c *RegionAPIController) ListRegionDnsRecords(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	regionIdParam := params["regionId"]
	if regionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"regionId"}, nil)
		return
	}
	result, err := c.service.ListRegionDnsRecords(r.Context(), regionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
