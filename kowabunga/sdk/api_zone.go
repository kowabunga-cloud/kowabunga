// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Kowabunga API
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.53.1
 * Contact: maintainers@kowabunga.cloud
 */

package sdk

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ZoneAPIController binds http requests to an api service and writes the service results to the http response
type ZoneAPIController struct {
	service ZoneAPIServicer
	errorHandler ErrorHandler
}

// ZoneAPIOption for how the controller is set up.
type ZoneAPIOption func(*ZoneAPIController)

// WithZoneAPIErrorHandler inject ErrorHandler into controller
func WithZoneAPIErrorHandler(h ErrorHandler) ZoneAPIOption {
	return func(c *ZoneAPIController) {
		c.errorHandler = h
	}
}

// NewZoneAPIController creates a default api controller
func NewZoneAPIController(s ZoneAPIServicer, opts ...ZoneAPIOption) *ZoneAPIController {
	controller := &ZoneAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ZoneAPIController
func (c *ZoneAPIController) Routes() Routes {
	return Routes{
		"ListZones": Route{
			"ListZones",
			strings.ToUpper("Get"),
			"/api/v1/zone",
			c.ListZones,
		},
		"ReadZone": Route{
			"ReadZone",
			strings.ToUpper("Get"),
			"/api/v1/zone/{zoneId}",
			c.ReadZone,
		},
		"UpdateZone": Route{
			"UpdateZone",
			strings.ToUpper("Put"),
			"/api/v1/zone/{zoneId}",
			c.UpdateZone,
		},
		"DeleteZone": Route{
			"DeleteZone",
			strings.ToUpper("Delete"),
			"/api/v1/zone/{zoneId}",
			c.DeleteZone,
		},
		"CreateKaktus": Route{
			"CreateKaktus",
			strings.ToUpper("Post"),
			"/api/v1/zone/{zoneId}/kaktus",
			c.CreateKaktus,
		},
		"ListZoneKaktuses": Route{
			"ListZoneKaktuses",
			strings.ToUpper("Get"),
			"/api/v1/zone/{zoneId}/kaktuses",
			c.ListZoneKaktuses,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the ZoneAPIController
func (c *ZoneAPIController) OrderedRoutes() []Route {
	return []Route{
		Route{
			"ListZones",
			strings.ToUpper("Get"),
			"/api/v1/zone",
			c.ListZones,
		},
		Route{
			"ReadZone",
			strings.ToUpper("Get"),
			"/api/v1/zone/{zoneId}",
			c.ReadZone,
		},
		Route{
			"UpdateZone",
			strings.ToUpper("Put"),
			"/api/v1/zone/{zoneId}",
			c.UpdateZone,
		},
		Route{
			"DeleteZone",
			strings.ToUpper("Delete"),
			"/api/v1/zone/{zoneId}",
			c.DeleteZone,
		},
		Route{
			"CreateKaktus",
			strings.ToUpper("Post"),
			"/api/v1/zone/{zoneId}/kaktus",
			c.CreateKaktus,
		},
		Route{
			"ListZoneKaktuses",
			strings.ToUpper("Get"),
			"/api/v1/zone/{zoneId}/kaktuses",
			c.ListZoneKaktuses,
		},
	}
}



// ListZones - 
func (c *ZoneAPIController) ListZones(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListZones(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadZone - 
func (c *ZoneAPIController) ReadZone(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.ReadZone(r.Context(), zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateZone - 
func (c *ZoneAPIController) UpdateZone(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	var zoneParam Zone
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&zoneParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertZoneRequired(zoneParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertZoneConstraints(zoneParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateZone(r.Context(), zoneIdParam, zoneParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteZone - 
func (c *ZoneAPIController) DeleteZone(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.DeleteZone(r.Context(), zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateKaktus - 
func (c *ZoneAPIController) CreateKaktus(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	var kaktusParam Kaktus
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&kaktusParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKaktusRequired(kaktusParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKaktusConstraints(kaktusParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateKaktus(r.Context(), zoneIdParam, kaktusParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListZoneKaktuses - 
func (c *ZoneAPIController) ListZoneKaktuses(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.ListZoneKaktuses(r.Context(), zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
