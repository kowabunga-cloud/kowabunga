// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Kowabunga API
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.53.2
 * Contact: maintainers@kowabunga.cloud
 */

package sdk

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// VnetAPIController binds http requests to an api service and writes the service results to the http response
type VnetAPIController struct {
	service VnetAPIServicer
	errorHandler ErrorHandler
}

// VnetAPIOption for how the controller is set up.
type VnetAPIOption func(*VnetAPIController)

// WithVnetAPIErrorHandler inject ErrorHandler into controller
func WithVnetAPIErrorHandler(h ErrorHandler) VnetAPIOption {
	return func(c *VnetAPIController) {
		c.errorHandler = h
	}
}

// NewVnetAPIController creates a default api controller
func NewVnetAPIController(s VnetAPIServicer, opts ...VnetAPIOption) *VnetAPIController {
	controller := &VnetAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the VnetAPIController
func (c *VnetAPIController) Routes() Routes {
	return Routes{
		"ListVNets": Route{
			"ListVNets",
			strings.ToUpper("Get"),
			"/api/v1/vnet",
			c.ListVNets,
		},
		"ReadVNet": Route{
			"ReadVNet",
			strings.ToUpper("Get"),
			"/api/v1/vnet/{vnetId}",
			c.ReadVNet,
		},
		"UpdateVNet": Route{
			"UpdateVNet",
			strings.ToUpper("Put"),
			"/api/v1/vnet/{vnetId}",
			c.UpdateVNet,
		},
		"DeleteVNet": Route{
			"DeleteVNet",
			strings.ToUpper("Delete"),
			"/api/v1/vnet/{vnetId}",
			c.DeleteVNet,
		},
		"CreateSubnet": Route{
			"CreateSubnet",
			strings.ToUpper("Post"),
			"/api/v1/vnet/{vnetId}/subnet",
			c.CreateSubnet,
		},
		"SetVNetDefaultSubnet": Route{
			"SetVNetDefaultSubnet",
			strings.ToUpper("Patch"),
			"/api/v1/vnet/{vnetId}/subnet/{subnetId}/default",
			c.SetVNetDefaultSubnet,
		},
		"ListVNetSubnets": Route{
			"ListVNetSubnets",
			strings.ToUpper("Get"),
			"/api/v1/vnet/{vnetId}/subnets",
			c.ListVNetSubnets,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the VnetAPIController
func (c *VnetAPIController) OrderedRoutes() []Route {
	return []Route{
		Route{
			"ListVNets",
			strings.ToUpper("Get"),
			"/api/v1/vnet",
			c.ListVNets,
		},
		Route{
			"ReadVNet",
			strings.ToUpper("Get"),
			"/api/v1/vnet/{vnetId}",
			c.ReadVNet,
		},
		Route{
			"UpdateVNet",
			strings.ToUpper("Put"),
			"/api/v1/vnet/{vnetId}",
			c.UpdateVNet,
		},
		Route{
			"DeleteVNet",
			strings.ToUpper("Delete"),
			"/api/v1/vnet/{vnetId}",
			c.DeleteVNet,
		},
		Route{
			"CreateSubnet",
			strings.ToUpper("Post"),
			"/api/v1/vnet/{vnetId}/subnet",
			c.CreateSubnet,
		},
		Route{
			"SetVNetDefaultSubnet",
			strings.ToUpper("Patch"),
			"/api/v1/vnet/{vnetId}/subnet/{subnetId}/default",
			c.SetVNetDefaultSubnet,
		},
		Route{
			"ListVNetSubnets",
			strings.ToUpper("Get"),
			"/api/v1/vnet/{vnetId}/subnets",
			c.ListVNetSubnets,
		},
	}
}



// ListVNets - 
func (c *VnetAPIController) ListVNets(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListVNets(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadVNet - 
func (c *VnetAPIController) ReadVNet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	vnetIdParam := params["vnetId"]
	if vnetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"vnetId"}, nil)
		return
	}
	result, err := c.service.ReadVNet(r.Context(), vnetIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateVNet - 
func (c *VnetAPIController) UpdateVNet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	vnetIdParam := params["vnetId"]
	if vnetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"vnetId"}, nil)
		return
	}
	var vNetParam VNet
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&vNetParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertVNetRequired(vNetParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertVNetConstraints(vNetParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateVNet(r.Context(), vnetIdParam, vNetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteVNet - 
func (c *VnetAPIController) DeleteVNet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	vnetIdParam := params["vnetId"]
	if vnetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"vnetId"}, nil)
		return
	}
	result, err := c.service.DeleteVNet(r.Context(), vnetIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateSubnet - 
func (c *VnetAPIController) CreateSubnet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	vnetIdParam := params["vnetId"]
	if vnetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"vnetId"}, nil)
		return
	}
	var subnetParam Subnet
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&subnetParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSubnetRequired(subnetParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSubnetConstraints(subnetParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateSubnet(r.Context(), vnetIdParam, subnetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetVNetDefaultSubnet - 
func (c *VnetAPIController) SetVNetDefaultSubnet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	vnetIdParam := params["vnetId"]
	if vnetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"vnetId"}, nil)
		return
	}
	subnetIdParam := params["subnetId"]
	if subnetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"subnetId"}, nil)
		return
	}
	result, err := c.service.SetVNetDefaultSubnet(r.Context(), vnetIdParam, subnetIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListVNetSubnets - 
func (c *VnetAPIController) ListVNetSubnets(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	vnetIdParam := params["vnetId"]
	if vnetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"vnetId"}, nil)
		return
	}
	result, err := c.service.ListVNetSubnets(r.Context(), vnetIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
