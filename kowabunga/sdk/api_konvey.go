// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Kowabunga API
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.53.1
 * Contact: maintainers@kowabunga.cloud
 */

package sdk

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// KonveyAPIController binds http requests to an api service and writes the service results to the http response
type KonveyAPIController struct {
	service KonveyAPIServicer
	errorHandler ErrorHandler
}

// KonveyAPIOption for how the controller is set up.
type KonveyAPIOption func(*KonveyAPIController)

// WithKonveyAPIErrorHandler inject ErrorHandler into controller
func WithKonveyAPIErrorHandler(h ErrorHandler) KonveyAPIOption {
	return func(c *KonveyAPIController) {
		c.errorHandler = h
	}
}

// NewKonveyAPIController creates a default api controller
func NewKonveyAPIController(s KonveyAPIServicer, opts ...KonveyAPIOption) *KonveyAPIController {
	controller := &KonveyAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the KonveyAPIController
func (c *KonveyAPIController) Routes() Routes {
	return Routes{
		"ListKonveys": Route{
			"ListKonveys",
			strings.ToUpper("Get"),
			"/api/v1/konvey",
			c.ListKonveys,
		},
		"ReadKonvey": Route{
			"ReadKonvey",
			strings.ToUpper("Get"),
			"/api/v1/konvey/{konveyId}",
			c.ReadKonvey,
		},
		"UpdateKonvey": Route{
			"UpdateKonvey",
			strings.ToUpper("Put"),
			"/api/v1/konvey/{konveyId}",
			c.UpdateKonvey,
		},
		"DeleteKonvey": Route{
			"DeleteKonvey",
			strings.ToUpper("Delete"),
			"/api/v1/konvey/{konveyId}",
			c.DeleteKonvey,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the KonveyAPIController
func (c *KonveyAPIController) OrderedRoutes() []Route {
	return []Route{
		Route{
			"ListKonveys",
			strings.ToUpper("Get"),
			"/api/v1/konvey",
			c.ListKonveys,
		},
		Route{
			"ReadKonvey",
			strings.ToUpper("Get"),
			"/api/v1/konvey/{konveyId}",
			c.ReadKonvey,
		},
		Route{
			"UpdateKonvey",
			strings.ToUpper("Put"),
			"/api/v1/konvey/{konveyId}",
			c.UpdateKonvey,
		},
		Route{
			"DeleteKonvey",
			strings.ToUpper("Delete"),
			"/api/v1/konvey/{konveyId}",
			c.DeleteKonvey,
		},
	}
}



// ListKonveys - 
func (c *KonveyAPIController) ListKonveys(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListKonveys(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadKonvey - 
func (c *KonveyAPIController) ReadKonvey(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	konveyIdParam := params["konveyId"]
	if konveyIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"konveyId"}, nil)
		return
	}
	result, err := c.service.ReadKonvey(r.Context(), konveyIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateKonvey - 
func (c *KonveyAPIController) UpdateKonvey(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	konveyIdParam := params["konveyId"]
	if konveyIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"konveyId"}, nil)
		return
	}
	var konveyParam Konvey
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&konveyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKonveyRequired(konveyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKonveyConstraints(konveyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateKonvey(r.Context(), konveyIdParam, konveyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteKonvey - 
func (c *KonveyAPIController) DeleteKonvey(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	konveyIdParam := params["konveyId"]
	if konveyIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"konveyId"}, nil)
		return
	}
	result, err := c.service.DeleteKonvey(r.Context(), konveyIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
