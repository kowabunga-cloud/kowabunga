// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Kowabunga API
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.53.1
 * Contact: maintainers@kowabunga.cloud
 */

package sdk




// Kawaii - A Kawaii (Kowabunga Adapative WAn Intelligent Interface) is a network gateway used for your Internet inbound and outbound traffic.
type Kawaii struct {

	// The Kawaii ID (auto-generated).
	Id string `json:"id,omitempty"`

	// The Kawaii name.
	Name string `json:"name,omitempty"`

	// The Kawaii description.
	Description string `json:"description,omitempty"`

	Netip KawaiiNetIp `json:"netip,omitempty"`

	Firewall KawaiiFirewall `json:"firewall,omitempty"`

	// The Kawaii list of NAT forwarding entries. Kawaii will forward public Internet traffic from all public virtual IPs to requested private subnet IP addresses.
	Dnat []KawaiiDNatRule `json:"dnat,omitempty"`

	// The Kawaii list of Kowabunga private VPC subnet peering entries.
	VpcPeerings []KawaiiVpcPeering `json:"vpc_peerings,omitempty"`

	// The Kawaii list of Kowabunga IPsec connections.
	IpsecConnections []KawaiiIpSec `json:"ipsec_connections,omitempty"`
}

// AssertKawaiiRequired checks if the required fields are not zero-ed
func AssertKawaiiRequired(obj Kawaii) error {
	if err := AssertKawaiiNetIpRequired(obj.Netip); err != nil {
		return err
	}
	if err := AssertKawaiiFirewallRequired(obj.Firewall); err != nil {
		return err
	}
	for _, el := range obj.Dnat {
		if err := AssertKawaiiDNatRuleRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.VpcPeerings {
		if err := AssertKawaiiVpcPeeringRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.IpsecConnections {
		if err := AssertKawaiiIpSecRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertKawaiiConstraints checks if the values respects the defined constraints
func AssertKawaiiConstraints(obj Kawaii) error {
	if err := AssertKawaiiNetIpConstraints(obj.Netip); err != nil {
		return err
	}
	if err := AssertKawaiiFirewallConstraints(obj.Firewall); err != nil {
		return err
	}
	for _, el := range obj.Dnat {
		if err := AssertKawaiiDNatRuleConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.VpcPeerings {
		if err := AssertKawaiiVpcPeeringConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.IpsecConnections {
		if err := AssertKawaiiIpSecConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
