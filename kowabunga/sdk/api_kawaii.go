// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Kowabunga API
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.53.2
 * Contact: maintainers@kowabunga.cloud
 */

package sdk

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// KawaiiAPIController binds http requests to an api service and writes the service results to the http response
type KawaiiAPIController struct {
	service KawaiiAPIServicer
	errorHandler ErrorHandler
}

// KawaiiAPIOption for how the controller is set up.
type KawaiiAPIOption func(*KawaiiAPIController)

// WithKawaiiAPIErrorHandler inject ErrorHandler into controller
func WithKawaiiAPIErrorHandler(h ErrorHandler) KawaiiAPIOption {
	return func(c *KawaiiAPIController) {
		c.errorHandler = h
	}
}

// NewKawaiiAPIController creates a default api controller
func NewKawaiiAPIController(s KawaiiAPIServicer, opts ...KawaiiAPIOption) *KawaiiAPIController {
	controller := &KawaiiAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the KawaiiAPIController
func (c *KawaiiAPIController) Routes() Routes {
	return Routes{
		"ListKawaiis": Route{
			"ListKawaiis",
			strings.ToUpper("Get"),
			"/api/v1/kawaii",
			c.ListKawaiis,
		},
		"ReadKawaii": Route{
			"ReadKawaii",
			strings.ToUpper("Get"),
			"/api/v1/kawaii/{kawaiiId}",
			c.ReadKawaii,
		},
		"UpdateKawaii": Route{
			"UpdateKawaii",
			strings.ToUpper("Put"),
			"/api/v1/kawaii/{kawaiiId}",
			c.UpdateKawaii,
		},
		"DeleteKawaii": Route{
			"DeleteKawaii",
			strings.ToUpper("Delete"),
			"/api/v1/kawaii/{kawaiiId}",
			c.DeleteKawaii,
		},
		"ListKawaiiIpSecs": Route{
			"ListKawaiiIpSecs",
			strings.ToUpper("Get"),
			"/api/v1/kawaii/{kawaiiId}/ipsec",
			c.ListKawaiiIpSecs,
		},
		"CreateKawaiiIpSec": Route{
			"CreateKawaiiIpSec",
			strings.ToUpper("Post"),
			"/api/v1/kawaii/{kawaiiId}/ipsec",
			c.CreateKawaiiIpSec,
		},
		"ReadKawaiiIpSec": Route{
			"ReadKawaiiIpSec",
			strings.ToUpper("Get"),
			"/api/v1/kawaii/{kawaiiId}/ipsec/{KawaiiIpSecId}",
			c.ReadKawaiiIpSec,
		},
		"UpdateKawaiiIpSec": Route{
			"UpdateKawaiiIpSec",
			strings.ToUpper("Put"),
			"/api/v1/kawaii/{kawaiiId}/ipsec/{KawaiiIpSecId}",
			c.UpdateKawaiiIpSec,
		},
		"DeleteKawaiiIpSec": Route{
			"DeleteKawaiiIpSec",
			strings.ToUpper("Delete"),
			"/api/v1/kawaii/{kawaiiId}/ipsec/{KawaiiIpSecId}",
			c.DeleteKawaiiIpSec,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the KawaiiAPIController
func (c *KawaiiAPIController) OrderedRoutes() []Route {
	return []Route{
		Route{
			"ListKawaiis",
			strings.ToUpper("Get"),
			"/api/v1/kawaii",
			c.ListKawaiis,
		},
		Route{
			"ReadKawaii",
			strings.ToUpper("Get"),
			"/api/v1/kawaii/{kawaiiId}",
			c.ReadKawaii,
		},
		Route{
			"UpdateKawaii",
			strings.ToUpper("Put"),
			"/api/v1/kawaii/{kawaiiId}",
			c.UpdateKawaii,
		},
		Route{
			"DeleteKawaii",
			strings.ToUpper("Delete"),
			"/api/v1/kawaii/{kawaiiId}",
			c.DeleteKawaii,
		},
		Route{
			"ListKawaiiIpSecs",
			strings.ToUpper("Get"),
			"/api/v1/kawaii/{kawaiiId}/ipsec",
			c.ListKawaiiIpSecs,
		},
		Route{
			"CreateKawaiiIpSec",
			strings.ToUpper("Post"),
			"/api/v1/kawaii/{kawaiiId}/ipsec",
			c.CreateKawaiiIpSec,
		},
		Route{
			"ReadKawaiiIpSec",
			strings.ToUpper("Get"),
			"/api/v1/kawaii/{kawaiiId}/ipsec/{KawaiiIpSecId}",
			c.ReadKawaiiIpSec,
		},
		Route{
			"UpdateKawaiiIpSec",
			strings.ToUpper("Put"),
			"/api/v1/kawaii/{kawaiiId}/ipsec/{KawaiiIpSecId}",
			c.UpdateKawaiiIpSec,
		},
		Route{
			"DeleteKawaiiIpSec",
			strings.ToUpper("Delete"),
			"/api/v1/kawaii/{kawaiiId}/ipsec/{KawaiiIpSecId}",
			c.DeleteKawaiiIpSec,
		},
	}
}



// ListKawaiis - 
func (c *KawaiiAPIController) ListKawaiis(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListKawaiis(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadKawaii - 
func (c *KawaiiAPIController) ReadKawaii(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kawaiiIdParam := params["kawaiiId"]
	if kawaiiIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kawaiiId"}, nil)
		return
	}
	result, err := c.service.ReadKawaii(r.Context(), kawaiiIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateKawaii - 
func (c *KawaiiAPIController) UpdateKawaii(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kawaiiIdParam := params["kawaiiId"]
	if kawaiiIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kawaiiId"}, nil)
		return
	}
	var kawaiiParam Kawaii
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&kawaiiParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKawaiiRequired(kawaiiParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKawaiiConstraints(kawaiiParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateKawaii(r.Context(), kawaiiIdParam, kawaiiParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteKawaii - 
func (c *KawaiiAPIController) DeleteKawaii(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kawaiiIdParam := params["kawaiiId"]
	if kawaiiIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kawaiiId"}, nil)
		return
	}
	result, err := c.service.DeleteKawaii(r.Context(), kawaiiIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListKawaiiIpSecs - 
func (c *KawaiiAPIController) ListKawaiiIpSecs(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kawaiiIdParam := params["kawaiiId"]
	if kawaiiIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kawaiiId"}, nil)
		return
	}
	result, err := c.service.ListKawaiiIpSecs(r.Context(), kawaiiIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateKawaiiIpSec - 
func (c *KawaiiAPIController) CreateKawaiiIpSec(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kawaiiIdParam := params["kawaiiId"]
	if kawaiiIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kawaiiId"}, nil)
		return
	}
	var kawaiiIpSecParam KawaiiIpSec
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&kawaiiIpSecParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKawaiiIpSecRequired(kawaiiIpSecParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKawaiiIpSecConstraints(kawaiiIpSecParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateKawaiiIpSec(r.Context(), kawaiiIdParam, kawaiiIpSecParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadKawaiiIpSec - 
func (c *KawaiiAPIController) ReadKawaiiIpSec(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kawaiiIdParam := params["kawaiiId"]
	if kawaiiIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kawaiiId"}, nil)
		return
	}
	kawaiiIpSecIdParam := params["KawaiiIpSecId"]
	if kawaiiIpSecIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"KawaiiIpSecId"}, nil)
		return
	}
	result, err := c.service.ReadKawaiiIpSec(r.Context(), kawaiiIdParam, kawaiiIpSecIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateKawaiiIpSec - 
func (c *KawaiiAPIController) UpdateKawaiiIpSec(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kawaiiIdParam := params["kawaiiId"]
	if kawaiiIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kawaiiId"}, nil)
		return
	}
	kawaiiIpSecIdParam := params["KawaiiIpSecId"]
	if kawaiiIpSecIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"KawaiiIpSecId"}, nil)
		return
	}
	var kawaiiIpSecParam KawaiiIpSec
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&kawaiiIpSecParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKawaiiIpSecRequired(kawaiiIpSecParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKawaiiIpSecConstraints(kawaiiIpSecParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateKawaiiIpSec(r.Context(), kawaiiIdParam, kawaiiIpSecIdParam, kawaiiIpSecParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteKawaiiIpSec - 
func (c *KawaiiAPIController) DeleteKawaiiIpSec(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kawaiiIdParam := params["kawaiiId"]
	if kawaiiIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kawaiiId"}, nil)
		return
	}
	kawaiiIpSecIdParam := params["KawaiiIpSecId"]
	if kawaiiIpSecIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"KawaiiIpSecId"}, nil)
		return
	}
	result, err := c.service.DeleteKawaiiIpSec(r.Context(), kawaiiIdParam, kawaiiIpSecIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
