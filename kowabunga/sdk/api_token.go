// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Kowabunga API
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.53.1
 * Contact: maintainers@kowabunga.cloud
 */

package sdk

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// TokenAPIController binds http requests to an api service and writes the service results to the http response
type TokenAPIController struct {
	service TokenAPIServicer
	errorHandler ErrorHandler
}

// TokenAPIOption for how the controller is set up.
type TokenAPIOption func(*TokenAPIController)

// WithTokenAPIErrorHandler inject ErrorHandler into controller
func WithTokenAPIErrorHandler(h ErrorHandler) TokenAPIOption {
	return func(c *TokenAPIController) {
		c.errorHandler = h
	}
}

// NewTokenAPIController creates a default api controller
func NewTokenAPIController(s TokenAPIServicer, opts ...TokenAPIOption) *TokenAPIController {
	controller := &TokenAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TokenAPIController
func (c *TokenAPIController) Routes() Routes {
	return Routes{
		"ListApiTokens": Route{
			"ListApiTokens",
			strings.ToUpper("Get"),
			"/api/v1/token",
			c.ListApiTokens,
		},
		"ReadApiToken": Route{
			"ReadApiToken",
			strings.ToUpper("Get"),
			"/api/v1/token/{tokenId}",
			c.ReadApiToken,
		},
		"UpdateApiToken": Route{
			"UpdateApiToken",
			strings.ToUpper("Put"),
			"/api/v1/token/{tokenId}",
			c.UpdateApiToken,
		},
		"DeleteApiToken": Route{
			"DeleteApiToken",
			strings.ToUpper("Delete"),
			"/api/v1/token/{tokenId}",
			c.DeleteApiToken,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the TokenAPIController
func (c *TokenAPIController) OrderedRoutes() []Route {
	return []Route{
		Route{
			"ListApiTokens",
			strings.ToUpper("Get"),
			"/api/v1/token",
			c.ListApiTokens,
		},
		Route{
			"ReadApiToken",
			strings.ToUpper("Get"),
			"/api/v1/token/{tokenId}",
			c.ReadApiToken,
		},
		Route{
			"UpdateApiToken",
			strings.ToUpper("Put"),
			"/api/v1/token/{tokenId}",
			c.UpdateApiToken,
		},
		Route{
			"DeleteApiToken",
			strings.ToUpper("Delete"),
			"/api/v1/token/{tokenId}",
			c.DeleteApiToken,
		},
	}
}



// ListApiTokens - 
func (c *TokenAPIController) ListApiTokens(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListApiTokens(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadApiToken - 
func (c *TokenAPIController) ReadApiToken(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	tokenIdParam := params["tokenId"]
	if tokenIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"tokenId"}, nil)
		return
	}
	result, err := c.service.ReadApiToken(r.Context(), tokenIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateApiToken - 
func (c *TokenAPIController) UpdateApiToken(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	tokenIdParam := params["tokenId"]
	if tokenIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"tokenId"}, nil)
		return
	}
	var apiTokenParam ApiToken
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&apiTokenParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApiTokenRequired(apiTokenParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApiTokenConstraints(apiTokenParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateApiToken(r.Context(), tokenIdParam, apiTokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteApiToken - 
func (c *TokenAPIController) DeleteApiToken(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	tokenIdParam := params["tokenId"]
	if tokenIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"tokenId"}, nil)
		return
	}
	result, err := c.service.DeleteApiToken(r.Context(), tokenIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
