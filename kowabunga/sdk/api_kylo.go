// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Kowabunga API
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.53.2
 * Contact: maintainers@kowabunga.cloud
 */

package sdk

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// KyloAPIController binds http requests to an api service and writes the service results to the http response
type KyloAPIController struct {
	service KyloAPIServicer
	errorHandler ErrorHandler
}

// KyloAPIOption for how the controller is set up.
type KyloAPIOption func(*KyloAPIController)

// WithKyloAPIErrorHandler inject ErrorHandler into controller
func WithKyloAPIErrorHandler(h ErrorHandler) KyloAPIOption {
	return func(c *KyloAPIController) {
		c.errorHandler = h
	}
}

// NewKyloAPIController creates a default api controller
func NewKyloAPIController(s KyloAPIServicer, opts ...KyloAPIOption) *KyloAPIController {
	controller := &KyloAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the KyloAPIController
func (c *KyloAPIController) Routes() Routes {
	return Routes{
		"ListKylos": Route{
			"ListKylos",
			strings.ToUpper("Get"),
			"/api/v1/kylo",
			c.ListKylos,
		},
		"ReadKylo": Route{
			"ReadKylo",
			strings.ToUpper("Get"),
			"/api/v1/kylo/{kyloId}",
			c.ReadKylo,
		},
		"UpdateKylo": Route{
			"UpdateKylo",
			strings.ToUpper("Put"),
			"/api/v1/kylo/{kyloId}",
			c.UpdateKylo,
		},
		"DeleteKylo": Route{
			"DeleteKylo",
			strings.ToUpper("Delete"),
			"/api/v1/kylo/{kyloId}",
			c.DeleteKylo,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the KyloAPIController
func (c *KyloAPIController) OrderedRoutes() []Route {
	return []Route{
		Route{
			"ListKylos",
			strings.ToUpper("Get"),
			"/api/v1/kylo",
			c.ListKylos,
		},
		Route{
			"ReadKylo",
			strings.ToUpper("Get"),
			"/api/v1/kylo/{kyloId}",
			c.ReadKylo,
		},
		Route{
			"UpdateKylo",
			strings.ToUpper("Put"),
			"/api/v1/kylo/{kyloId}",
			c.UpdateKylo,
		},
		Route{
			"DeleteKylo",
			strings.ToUpper("Delete"),
			"/api/v1/kylo/{kyloId}",
			c.DeleteKylo,
		},
	}
}



// ListKylos - 
func (c *KyloAPIController) ListKylos(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListKylos(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadKylo - 
func (c *KyloAPIController) ReadKylo(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kyloIdParam := params["kyloId"]
	if kyloIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kyloId"}, nil)
		return
	}
	result, err := c.service.ReadKylo(r.Context(), kyloIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateKylo - 
func (c *KyloAPIController) UpdateKylo(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kyloIdParam := params["kyloId"]
	if kyloIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kyloId"}, nil)
		return
	}
	var kyloParam Kylo
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&kyloParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKyloRequired(kyloParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKyloConstraints(kyloParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateKylo(r.Context(), kyloIdParam, kyloParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteKylo - 
func (c *KyloAPIController) DeleteKylo(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kyloIdParam := params["kyloId"]
	if kyloIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kyloId"}, nil)
		return
	}
	result, err := c.service.DeleteKylo(r.Context(), kyloIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
