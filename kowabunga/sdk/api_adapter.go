// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Kowabunga API documentation
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 */

package sdk

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AdapterAPIController binds http requests to an api service and writes the service results to the http response
type AdapterAPIController struct {
	service AdapterAPIServicer
	errorHandler ErrorHandler
}

// AdapterAPIOption for how the controller is set up.
type AdapterAPIOption func(*AdapterAPIController)

// WithAdapterAPIErrorHandler inject ErrorHandler into controller
func WithAdapterAPIErrorHandler(h ErrorHandler) AdapterAPIOption {
	return func(c *AdapterAPIController) {
		c.errorHandler = h
	}
}

// NewAdapterAPIController creates a default api controller
func NewAdapterAPIController(s AdapterAPIServicer, opts ...AdapterAPIOption) *AdapterAPIController {
	controller := &AdapterAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AdapterAPIController
func (c *AdapterAPIController) Routes() Routes {
	return Routes{
		"ListAdapters": Route{
			strings.ToUpper("Get"),
			"/api/v1/adapter",
			c.ListAdapters,
		},
		"ReadAdapter": Route{
			strings.ToUpper("Get"),
			"/api/v1/adapter/{adapterId}",
			c.ReadAdapter,
		},
		"UpdateAdapter": Route{
			strings.ToUpper("Put"),
			"/api/v1/adapter/{adapterId}",
			c.UpdateAdapter,
		},
		"DeleteAdapter": Route{
			strings.ToUpper("Delete"),
			"/api/v1/adapter/{adapterId}",
			c.DeleteAdapter,
		},
	}
}

// ListAdapters - 
func (c *AdapterAPIController) ListAdapters(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListAdapters(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadAdapter - 
func (c *AdapterAPIController) ReadAdapter(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adapterIdParam := params["adapterId"]
	if adapterIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"adapterId"}, nil)
		return
	}
	result, err := c.service.ReadAdapter(r.Context(), adapterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateAdapter - 
func (c *AdapterAPIController) UpdateAdapter(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adapterIdParam := params["adapterId"]
	if adapterIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"adapterId"}, nil)
		return
	}
	var adapterParam Adapter
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&adapterParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAdapterRequired(adapterParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAdapterConstraints(adapterParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateAdapter(r.Context(), adapterIdParam, adapterParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteAdapter - 
func (c *AdapterAPIController) DeleteAdapter(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adapterIdParam := params["adapterId"]
	if adapterIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"adapterId"}, nil)
		return
	}
	result, err := c.service.DeleteAdapter(r.Context(), adapterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
