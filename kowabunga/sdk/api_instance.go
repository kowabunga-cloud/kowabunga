// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Kowabunga API documentation
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 */

package sdk

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// InstanceAPIController binds http requests to an api service and writes the service results to the http response
type InstanceAPIController struct {
	service InstanceAPIServicer
	errorHandler ErrorHandler
}

// InstanceAPIOption for how the controller is set up.
type InstanceAPIOption func(*InstanceAPIController)

// WithInstanceAPIErrorHandler inject ErrorHandler into controller
func WithInstanceAPIErrorHandler(h ErrorHandler) InstanceAPIOption {
	return func(c *InstanceAPIController) {
		c.errorHandler = h
	}
}

// NewInstanceAPIController creates a default api controller
func NewInstanceAPIController(s InstanceAPIServicer, opts ...InstanceAPIOption) *InstanceAPIController {
	controller := &InstanceAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the InstanceAPIController
func (c *InstanceAPIController) Routes() Routes {
	return Routes{
		"ListInstances": Route{
			strings.ToUpper("Get"),
			"/api/v1/instance",
			c.ListInstances,
		},
		"ReadInstance": Route{
			strings.ToUpper("Get"),
			"/api/v1/instance/{instanceId}",
			c.ReadInstance,
		},
		"UpdateInstance": Route{
			strings.ToUpper("Put"),
			"/api/v1/instance/{instanceId}",
			c.UpdateInstance,
		},
		"DeleteInstance": Route{
			strings.ToUpper("Delete"),
			"/api/v1/instance/{instanceId}",
			c.DeleteInstance,
		},
		"ReadInstanceState": Route{
			strings.ToUpper("Get"),
			"/api/v1/instance/{instanceId}/state",
			c.ReadInstanceState,
		},
		"RebootInstance": Route{
			strings.ToUpper("Patch"),
			"/api/v1/instance/{instanceId}/reboot",
			c.RebootInstance,
		},
		"ResetInstance": Route{
			strings.ToUpper("Patch"),
			"/api/v1/instance/{instanceId}/reset",
			c.ResetInstance,
		},
		"SuspendInstance": Route{
			strings.ToUpper("Patch"),
			"/api/v1/instance/{instanceId}/suspend",
			c.SuspendInstance,
		},
		"ResumeInstance": Route{
			strings.ToUpper("Patch"),
			"/api/v1/instance/{instanceId}/resume",
			c.ResumeInstance,
		},
		"StartInstance": Route{
			strings.ToUpper("Patch"),
			"/api/v1/instance/{instanceId}/start",
			c.StartInstance,
		},
		"StopInstance": Route{
			strings.ToUpper("Patch"),
			"/api/v1/instance/{instanceId}/stop",
			c.StopInstance,
		},
		"ShutdownInstance": Route{
			strings.ToUpper("Patch"),
			"/api/v1/instance/{instanceId}/shutdown",
			c.ShutdownInstance,
		},
		"ReadInstanceRemoteConnection": Route{
			strings.ToUpper("Get"),
			"/api/v1/instance/{instanceId}/connect",
			c.ReadInstanceRemoteConnection,
		},
	}
}

// ListInstances - 
func (c *InstanceAPIController) ListInstances(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListInstances(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadInstance - 
func (c *InstanceAPIController) ReadInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	instanceIdParam := params["instanceId"]
	if instanceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"instanceId"}, nil)
		return
	}
	result, err := c.service.ReadInstance(r.Context(), instanceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateInstance - 
func (c *InstanceAPIController) UpdateInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	instanceIdParam := params["instanceId"]
	if instanceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"instanceId"}, nil)
		return
	}
	var instanceParam Instance
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&instanceParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertInstanceRequired(instanceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertInstanceConstraints(instanceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateInstance(r.Context(), instanceIdParam, instanceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteInstance - 
func (c *InstanceAPIController) DeleteInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	instanceIdParam := params["instanceId"]
	if instanceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"instanceId"}, nil)
		return
	}
	result, err := c.service.DeleteInstance(r.Context(), instanceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadInstanceState - 
func (c *InstanceAPIController) ReadInstanceState(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	instanceIdParam := params["instanceId"]
	if instanceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"instanceId"}, nil)
		return
	}
	result, err := c.service.ReadInstanceState(r.Context(), instanceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RebootInstance - 
func (c *InstanceAPIController) RebootInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	instanceIdParam := params["instanceId"]
	if instanceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"instanceId"}, nil)
		return
	}
	result, err := c.service.RebootInstance(r.Context(), instanceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ResetInstance - 
func (c *InstanceAPIController) ResetInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	instanceIdParam := params["instanceId"]
	if instanceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"instanceId"}, nil)
		return
	}
	result, err := c.service.ResetInstance(r.Context(), instanceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SuspendInstance - 
func (c *InstanceAPIController) SuspendInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	instanceIdParam := params["instanceId"]
	if instanceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"instanceId"}, nil)
		return
	}
	result, err := c.service.SuspendInstance(r.Context(), instanceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ResumeInstance - 
func (c *InstanceAPIController) ResumeInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	instanceIdParam := params["instanceId"]
	if instanceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"instanceId"}, nil)
		return
	}
	result, err := c.service.ResumeInstance(r.Context(), instanceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// StartInstance - 
func (c *InstanceAPIController) StartInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	instanceIdParam := params["instanceId"]
	if instanceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"instanceId"}, nil)
		return
	}
	result, err := c.service.StartInstance(r.Context(), instanceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// StopInstance - 
func (c *InstanceAPIController) StopInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	instanceIdParam := params["instanceId"]
	if instanceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"instanceId"}, nil)
		return
	}
	result, err := c.service.StopInstance(r.Context(), instanceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ShutdownInstance - 
func (c *InstanceAPIController) ShutdownInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	instanceIdParam := params["instanceId"]
	if instanceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"instanceId"}, nil)
		return
	}
	result, err := c.service.ShutdownInstance(r.Context(), instanceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadInstanceRemoteConnection - 
func (c *InstanceAPIController) ReadInstanceRemoteConnection(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	instanceIdParam := params["instanceId"]
	if instanceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"instanceId"}, nil)
		return
	}
	result, err := c.service.ReadInstanceRemoteConnection(r.Context(), instanceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
