// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Kowabunga API
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.53.2
 * Contact: maintainers@kowabunga.cloud
 */

package sdk

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// RecordAPIController binds http requests to an api service and writes the service results to the http response
type RecordAPIController struct {
	service RecordAPIServicer
	errorHandler ErrorHandler
}

// RecordAPIOption for how the controller is set up.
type RecordAPIOption func(*RecordAPIController)

// WithRecordAPIErrorHandler inject ErrorHandler into controller
func WithRecordAPIErrorHandler(h ErrorHandler) RecordAPIOption {
	return func(c *RecordAPIController) {
		c.errorHandler = h
	}
}

// NewRecordAPIController creates a default api controller
func NewRecordAPIController(s RecordAPIServicer, opts ...RecordAPIOption) *RecordAPIController {
	controller := &RecordAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RecordAPIController
func (c *RecordAPIController) Routes() Routes {
	return Routes{
		"ReadDnsRecord": Route{
			"ReadDnsRecord",
			strings.ToUpper("Get"),
			"/api/v1/record/{recordId}",
			c.ReadDnsRecord,
		},
		"UpdateDnsRecord": Route{
			"UpdateDnsRecord",
			strings.ToUpper("Put"),
			"/api/v1/record/{recordId}",
			c.UpdateDnsRecord,
		},
		"DeleteDnsRecord": Route{
			"DeleteDnsRecord",
			strings.ToUpper("Delete"),
			"/api/v1/record/{recordId}",
			c.DeleteDnsRecord,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the RecordAPIController
func (c *RecordAPIController) OrderedRoutes() []Route {
	return []Route{
		Route{
			"ReadDnsRecord",
			strings.ToUpper("Get"),
			"/api/v1/record/{recordId}",
			c.ReadDnsRecord,
		},
		Route{
			"UpdateDnsRecord",
			strings.ToUpper("Put"),
			"/api/v1/record/{recordId}",
			c.UpdateDnsRecord,
		},
		Route{
			"DeleteDnsRecord",
			strings.ToUpper("Delete"),
			"/api/v1/record/{recordId}",
			c.DeleteDnsRecord,
		},
	}
}



// ReadDnsRecord - 
func (c *RecordAPIController) ReadDnsRecord(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	recordIdParam := params["recordId"]
	if recordIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"recordId"}, nil)
		return
	}
	result, err := c.service.ReadDnsRecord(r.Context(), recordIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateDnsRecord - 
func (c *RecordAPIController) UpdateDnsRecord(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	recordIdParam := params["recordId"]
	if recordIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"recordId"}, nil)
		return
	}
	var dnsRecordParam DnsRecord
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&dnsRecordParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDnsRecordRequired(dnsRecordParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDnsRecordConstraints(dnsRecordParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateDnsRecord(r.Context(), recordIdParam, dnsRecordParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteDnsRecord - 
func (c *RecordAPIController) DeleteDnsRecord(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	recordIdParam := params["recordId"]
	if recordIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"recordId"}, nil)
		return
	}
	result, err := c.service.DeleteDnsRecord(r.Context(), recordIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
