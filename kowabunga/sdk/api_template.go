// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Kowabunga API
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.53.1
 * Contact: maintainers@kowabunga.cloud
 */

package sdk

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// TemplateAPIController binds http requests to an api service and writes the service results to the http response
type TemplateAPIController struct {
	service TemplateAPIServicer
	errorHandler ErrorHandler
}

// TemplateAPIOption for how the controller is set up.
type TemplateAPIOption func(*TemplateAPIController)

// WithTemplateAPIErrorHandler inject ErrorHandler into controller
func WithTemplateAPIErrorHandler(h ErrorHandler) TemplateAPIOption {
	return func(c *TemplateAPIController) {
		c.errorHandler = h
	}
}

// NewTemplateAPIController creates a default api controller
func NewTemplateAPIController(s TemplateAPIServicer, opts ...TemplateAPIOption) *TemplateAPIController {
	controller := &TemplateAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TemplateAPIController
func (c *TemplateAPIController) Routes() Routes {
	return Routes{
		"ListTemplates": Route{
			"ListTemplates",
			strings.ToUpper("Get"),
			"/api/v1/template",
			c.ListTemplates,
		},
		"ReadTemplate": Route{
			"ReadTemplate",
			strings.ToUpper("Get"),
			"/api/v1/template/{templateId}",
			c.ReadTemplate,
		},
		"UpdateTemplate": Route{
			"UpdateTemplate",
			strings.ToUpper("Put"),
			"/api/v1/template/{templateId}",
			c.UpdateTemplate,
		},
		"DeleteTemplate": Route{
			"DeleteTemplate",
			strings.ToUpper("Delete"),
			"/api/v1/template/{templateId}",
			c.DeleteTemplate,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the TemplateAPIController
func (c *TemplateAPIController) OrderedRoutes() []Route {
	return []Route{
		Route{
			"ListTemplates",
			strings.ToUpper("Get"),
			"/api/v1/template",
			c.ListTemplates,
		},
		Route{
			"ReadTemplate",
			strings.ToUpper("Get"),
			"/api/v1/template/{templateId}",
			c.ReadTemplate,
		},
		Route{
			"UpdateTemplate",
			strings.ToUpper("Put"),
			"/api/v1/template/{templateId}",
			c.UpdateTemplate,
		},
		Route{
			"DeleteTemplate",
			strings.ToUpper("Delete"),
			"/api/v1/template/{templateId}",
			c.DeleteTemplate,
		},
	}
}



// ListTemplates - 
func (c *TemplateAPIController) ListTemplates(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListTemplates(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadTemplate - 
func (c *TemplateAPIController) ReadTemplate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	templateIdParam := params["templateId"]
	if templateIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"templateId"}, nil)
		return
	}
	result, err := c.service.ReadTemplate(r.Context(), templateIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateTemplate - 
func (c *TemplateAPIController) UpdateTemplate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	templateIdParam := params["templateId"]
	if templateIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"templateId"}, nil)
		return
	}
	var templateParam Template
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&templateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTemplateRequired(templateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTemplateConstraints(templateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateTemplate(r.Context(), templateIdParam, templateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteTemplate - 
func (c *TemplateAPIController) DeleteTemplate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	templateIdParam := params["templateId"]
	if templateIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"templateId"}, nil)
		return
	}
	result, err := c.service.DeleteTemplate(r.Context(), templateIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
