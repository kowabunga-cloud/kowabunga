// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Kowabunga API
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.53.1
 * Contact: maintainers@kowabunga.cloud
 */

package sdk

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AgentAPIController binds http requests to an api service and writes the service results to the http response
type AgentAPIController struct {
	service AgentAPIServicer
	errorHandler ErrorHandler
}

// AgentAPIOption for how the controller is set up.
type AgentAPIOption func(*AgentAPIController)

// WithAgentAPIErrorHandler inject ErrorHandler into controller
func WithAgentAPIErrorHandler(h ErrorHandler) AgentAPIOption {
	return func(c *AgentAPIController) {
		c.errorHandler = h
	}
}

// NewAgentAPIController creates a default api controller
func NewAgentAPIController(s AgentAPIServicer, opts ...AgentAPIOption) *AgentAPIController {
	controller := &AgentAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AgentAPIController
func (c *AgentAPIController) Routes() Routes {
	return Routes{
		"ListAgents": Route{
			"ListAgents",
			strings.ToUpper("Get"),
			"/api/v1/agent",
			c.ListAgents,
		},
		"CreateAgent": Route{
			"CreateAgent",
			strings.ToUpper("Post"),
			"/api/v1/agent",
			c.CreateAgent,
		},
		"ReadAgent": Route{
			"ReadAgent",
			strings.ToUpper("Get"),
			"/api/v1/agent/{agentId}",
			c.ReadAgent,
		},
		"UpdateAgent": Route{
			"UpdateAgent",
			strings.ToUpper("Put"),
			"/api/v1/agent/{agentId}",
			c.UpdateAgent,
		},
		"DeleteAgent": Route{
			"DeleteAgent",
			strings.ToUpper("Delete"),
			"/api/v1/agent/{agentId}",
			c.DeleteAgent,
		},
		"SetAgentApiToken": Route{
			"SetAgentApiToken",
			strings.ToUpper("Patch"),
			"/api/v1/agent/{agentId}/token",
			c.SetAgentApiToken,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the AgentAPIController
func (c *AgentAPIController) OrderedRoutes() []Route {
	return []Route{
		Route{
			"ListAgents",
			strings.ToUpper("Get"),
			"/api/v1/agent",
			c.ListAgents,
		},
		Route{
			"CreateAgent",
			strings.ToUpper("Post"),
			"/api/v1/agent",
			c.CreateAgent,
		},
		Route{
			"ReadAgent",
			strings.ToUpper("Get"),
			"/api/v1/agent/{agentId}",
			c.ReadAgent,
		},
		Route{
			"UpdateAgent",
			strings.ToUpper("Put"),
			"/api/v1/agent/{agentId}",
			c.UpdateAgent,
		},
		Route{
			"DeleteAgent",
			strings.ToUpper("Delete"),
			"/api/v1/agent/{agentId}",
			c.DeleteAgent,
		},
		Route{
			"SetAgentApiToken",
			strings.ToUpper("Patch"),
			"/api/v1/agent/{agentId}/token",
			c.SetAgentApiToken,
		},
	}
}



// ListAgents - 
func (c *AgentAPIController) ListAgents(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListAgents(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateAgent - 
func (c *AgentAPIController) CreateAgent(w http.ResponseWriter, r *http.Request) {
	var agentParam Agent
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&agentParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAgentRequired(agentParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAgentConstraints(agentParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateAgent(r.Context(), agentParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadAgent - 
func (c *AgentAPIController) ReadAgent(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	agentIdParam := params["agentId"]
	if agentIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"agentId"}, nil)
		return
	}
	result, err := c.service.ReadAgent(r.Context(), agentIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateAgent - 
func (c *AgentAPIController) UpdateAgent(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	agentIdParam := params["agentId"]
	if agentIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"agentId"}, nil)
		return
	}
	var agentParam Agent
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&agentParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAgentRequired(agentParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAgentConstraints(agentParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateAgent(r.Context(), agentIdParam, agentParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteAgent - 
func (c *AgentAPIController) DeleteAgent(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	agentIdParam := params["agentId"]
	if agentIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"agentId"}, nil)
		return
	}
	result, err := c.service.DeleteAgent(r.Context(), agentIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetAgentApiToken - 
func (c *AgentAPIController) SetAgentApiToken(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	agentIdParam := params["agentId"]
	if agentIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"agentId"}, nil)
		return
	}
	var expireParam bool
	if query.Has("expire") {
		param, err := parseBoolParameter(
			query.Get("expire"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "expire", Err: err}, nil)
			return
		}

		expireParam = param
	} else {
	}
	var expirationDateParam string
	if query.Has("expiration_date") {
		param := string(query.Get("expiration_date"))

		expirationDateParam = param
	} else {
	}
	result, err := c.service.SetAgentApiToken(r.Context(), agentIdParam, expireParam, expirationDateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
