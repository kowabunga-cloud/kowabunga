// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Kowabunga API
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.53.1
 * Contact: maintainers@kowabunga.cloud
 */

package sdk

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// VolumeAPIController binds http requests to an api service and writes the service results to the http response
type VolumeAPIController struct {
	service VolumeAPIServicer
	errorHandler ErrorHandler
}

// VolumeAPIOption for how the controller is set up.
type VolumeAPIOption func(*VolumeAPIController)

// WithVolumeAPIErrorHandler inject ErrorHandler into controller
func WithVolumeAPIErrorHandler(h ErrorHandler) VolumeAPIOption {
	return func(c *VolumeAPIController) {
		c.errorHandler = h
	}
}

// NewVolumeAPIController creates a default api controller
func NewVolumeAPIController(s VolumeAPIServicer, opts ...VolumeAPIOption) *VolumeAPIController {
	controller := &VolumeAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the VolumeAPIController
func (c *VolumeAPIController) Routes() Routes {
	return Routes{
		"ListVolumes": Route{
			"ListVolumes",
			strings.ToUpper("Get"),
			"/api/v1/volume",
			c.ListVolumes,
		},
		"ReadVolume": Route{
			"ReadVolume",
			strings.ToUpper("Get"),
			"/api/v1/volume/{volumeId}",
			c.ReadVolume,
		},
		"UpdateVolume": Route{
			"UpdateVolume",
			strings.ToUpper("Put"),
			"/api/v1/volume/{volumeId}",
			c.UpdateVolume,
		},
		"DeleteVolume": Route{
			"DeleteVolume",
			strings.ToUpper("Delete"),
			"/api/v1/volume/{volumeId}",
			c.DeleteVolume,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the VolumeAPIController
func (c *VolumeAPIController) OrderedRoutes() []Route {
	return []Route{
		Route{
			"ListVolumes",
			strings.ToUpper("Get"),
			"/api/v1/volume",
			c.ListVolumes,
		},
		Route{
			"ReadVolume",
			strings.ToUpper("Get"),
			"/api/v1/volume/{volumeId}",
			c.ReadVolume,
		},
		Route{
			"UpdateVolume",
			strings.ToUpper("Put"),
			"/api/v1/volume/{volumeId}",
			c.UpdateVolume,
		},
		Route{
			"DeleteVolume",
			strings.ToUpper("Delete"),
			"/api/v1/volume/{volumeId}",
			c.DeleteVolume,
		},
	}
}



// ListVolumes - 
func (c *VolumeAPIController) ListVolumes(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListVolumes(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadVolume - 
func (c *VolumeAPIController) ReadVolume(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	volumeIdParam := params["volumeId"]
	if volumeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"volumeId"}, nil)
		return
	}
	result, err := c.service.ReadVolume(r.Context(), volumeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateVolume - 
func (c *VolumeAPIController) UpdateVolume(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	volumeIdParam := params["volumeId"]
	if volumeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"volumeId"}, nil)
		return
	}
	var volumeParam Volume
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&volumeParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertVolumeRequired(volumeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertVolumeConstraints(volumeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateVolume(r.Context(), volumeIdParam, volumeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteVolume - 
func (c *VolumeAPIController) DeleteVolume(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	volumeIdParam := params["volumeId"]
	if volumeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"volumeId"}, nil)
		return
	}
	result, err := c.service.DeleteVolume(r.Context(), volumeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
