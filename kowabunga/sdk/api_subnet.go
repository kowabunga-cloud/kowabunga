// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Kowabunga API
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.53.1
 * Contact: maintainers@kowabunga.cloud
 */

package sdk

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// SubnetAPIController binds http requests to an api service and writes the service results to the http response
type SubnetAPIController struct {
	service SubnetAPIServicer
	errorHandler ErrorHandler
}

// SubnetAPIOption for how the controller is set up.
type SubnetAPIOption func(*SubnetAPIController)

// WithSubnetAPIErrorHandler inject ErrorHandler into controller
func WithSubnetAPIErrorHandler(h ErrorHandler) SubnetAPIOption {
	return func(c *SubnetAPIController) {
		c.errorHandler = h
	}
}

// NewSubnetAPIController creates a default api controller
func NewSubnetAPIController(s SubnetAPIServicer, opts ...SubnetAPIOption) *SubnetAPIController {
	controller := &SubnetAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SubnetAPIController
func (c *SubnetAPIController) Routes() Routes {
	return Routes{
		"ListSubnets": Route{
			"ListSubnets",
			strings.ToUpper("Get"),
			"/api/v1/subnet",
			c.ListSubnets,
		},
		"ReadSubnet": Route{
			"ReadSubnet",
			strings.ToUpper("Get"),
			"/api/v1/subnet/{subnetId}",
			c.ReadSubnet,
		},
		"UpdateSubnet": Route{
			"UpdateSubnet",
			strings.ToUpper("Put"),
			"/api/v1/subnet/{subnetId}",
			c.UpdateSubnet,
		},
		"DeleteSubnet": Route{
			"DeleteSubnet",
			strings.ToUpper("Delete"),
			"/api/v1/subnet/{subnetId}",
			c.DeleteSubnet,
		},
		"CreateAdapter": Route{
			"CreateAdapter",
			strings.ToUpper("Post"),
			"/api/v1/subnet/{subnetId}/adapter",
			c.CreateAdapter,
		},
		"ListSubnetAdapters": Route{
			"ListSubnetAdapters",
			strings.ToUpper("Get"),
			"/api/v1/subnet/{subnetId}/adapters",
			c.ListSubnetAdapters,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the SubnetAPIController
func (c *SubnetAPIController) OrderedRoutes() []Route {
	return []Route{
		Route{
			"ListSubnets",
			strings.ToUpper("Get"),
			"/api/v1/subnet",
			c.ListSubnets,
		},
		Route{
			"ReadSubnet",
			strings.ToUpper("Get"),
			"/api/v1/subnet/{subnetId}",
			c.ReadSubnet,
		},
		Route{
			"UpdateSubnet",
			strings.ToUpper("Put"),
			"/api/v1/subnet/{subnetId}",
			c.UpdateSubnet,
		},
		Route{
			"DeleteSubnet",
			strings.ToUpper("Delete"),
			"/api/v1/subnet/{subnetId}",
			c.DeleteSubnet,
		},
		Route{
			"CreateAdapter",
			strings.ToUpper("Post"),
			"/api/v1/subnet/{subnetId}/adapter",
			c.CreateAdapter,
		},
		Route{
			"ListSubnetAdapters",
			strings.ToUpper("Get"),
			"/api/v1/subnet/{subnetId}/adapters",
			c.ListSubnetAdapters,
		},
	}
}



// ListSubnets - 
func (c *SubnetAPIController) ListSubnets(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListSubnets(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadSubnet - 
func (c *SubnetAPIController) ReadSubnet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	subnetIdParam := params["subnetId"]
	if subnetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"subnetId"}, nil)
		return
	}
	result, err := c.service.ReadSubnet(r.Context(), subnetIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateSubnet - 
func (c *SubnetAPIController) UpdateSubnet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	subnetIdParam := params["subnetId"]
	if subnetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"subnetId"}, nil)
		return
	}
	var subnetParam Subnet
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&subnetParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSubnetRequired(subnetParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSubnetConstraints(subnetParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateSubnet(r.Context(), subnetIdParam, subnetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteSubnet - 
func (c *SubnetAPIController) DeleteSubnet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	subnetIdParam := params["subnetId"]
	if subnetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"subnetId"}, nil)
		return
	}
	result, err := c.service.DeleteSubnet(r.Context(), subnetIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateAdapter - 
func (c *SubnetAPIController) CreateAdapter(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	subnetIdParam := params["subnetId"]
	if subnetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"subnetId"}, nil)
		return
	}
	var adapterParam Adapter
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&adapterParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAdapterRequired(adapterParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAdapterConstraints(adapterParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var assignIPParam bool
	if query.Has("assignIP") {
		param, err := parseBoolParameter(
			query.Get("assignIP"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "assignIP", Err: err}, nil)
			return
		}

		assignIPParam = param
	} else {
	}
	result, err := c.service.CreateAdapter(r.Context(), subnetIdParam, adapterParam, assignIPParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListSubnetAdapters - 
func (c *SubnetAPIController) ListSubnetAdapters(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	subnetIdParam := params["subnetId"]
	if subnetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"subnetId"}, nil)
		return
	}
	result, err := c.service.ListSubnetAdapters(r.Context(), subnetIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
