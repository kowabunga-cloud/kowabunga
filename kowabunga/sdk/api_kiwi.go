// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Kowabunga API
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.53.1
 * Contact: maintainers@kowabunga.cloud
 */

package sdk

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// KiwiAPIController binds http requests to an api service and writes the service results to the http response
type KiwiAPIController struct {
	service KiwiAPIServicer
	errorHandler ErrorHandler
}

// KiwiAPIOption for how the controller is set up.
type KiwiAPIOption func(*KiwiAPIController)

// WithKiwiAPIErrorHandler inject ErrorHandler into controller
func WithKiwiAPIErrorHandler(h ErrorHandler) KiwiAPIOption {
	return func(c *KiwiAPIController) {
		c.errorHandler = h
	}
}

// NewKiwiAPIController creates a default api controller
func NewKiwiAPIController(s KiwiAPIServicer, opts ...KiwiAPIOption) *KiwiAPIController {
	controller := &KiwiAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the KiwiAPIController
func (c *KiwiAPIController) Routes() Routes {
	return Routes{
		"ListKiwis": Route{
			"ListKiwis",
			strings.ToUpper("Get"),
			"/api/v1/kiwi",
			c.ListKiwis,
		},
		"ReadKiwi": Route{
			"ReadKiwi",
			strings.ToUpper("Get"),
			"/api/v1/kiwi/{kiwiId}",
			c.ReadKiwi,
		},
		"UpdateKiwi": Route{
			"UpdateKiwi",
			strings.ToUpper("Put"),
			"/api/v1/kiwi/{kiwiId}",
			c.UpdateKiwi,
		},
		"DeleteKiwi": Route{
			"DeleteKiwi",
			strings.ToUpper("Delete"),
			"/api/v1/kiwi/{kiwiId}",
			c.DeleteKiwi,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the KiwiAPIController
func (c *KiwiAPIController) OrderedRoutes() []Route {
	return []Route{
		Route{
			"ListKiwis",
			strings.ToUpper("Get"),
			"/api/v1/kiwi",
			c.ListKiwis,
		},
		Route{
			"ReadKiwi",
			strings.ToUpper("Get"),
			"/api/v1/kiwi/{kiwiId}",
			c.ReadKiwi,
		},
		Route{
			"UpdateKiwi",
			strings.ToUpper("Put"),
			"/api/v1/kiwi/{kiwiId}",
			c.UpdateKiwi,
		},
		Route{
			"DeleteKiwi",
			strings.ToUpper("Delete"),
			"/api/v1/kiwi/{kiwiId}",
			c.DeleteKiwi,
		},
	}
}



// ListKiwis - 
func (c *KiwiAPIController) ListKiwis(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListKiwis(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadKiwi - 
func (c *KiwiAPIController) ReadKiwi(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kiwiIdParam := params["kiwiId"]
	if kiwiIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kiwiId"}, nil)
		return
	}
	result, err := c.service.ReadKiwi(r.Context(), kiwiIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateKiwi - 
func (c *KiwiAPIController) UpdateKiwi(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kiwiIdParam := params["kiwiId"]
	if kiwiIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kiwiId"}, nil)
		return
	}
	var kiwiParam Kiwi
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&kiwiParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKiwiRequired(kiwiParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKiwiConstraints(kiwiParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateKiwi(r.Context(), kiwiIdParam, kiwiParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteKiwi - 
func (c *KiwiAPIController) DeleteKiwi(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kiwiIdParam := params["kiwiId"]
	if kiwiIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kiwiId"}, nil)
		return
	}
	result, err := c.service.DeleteKiwi(r.Context(), kiwiIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
