// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Kowabunga API documentation
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 */

package sdk

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// PoolAPIController binds http requests to an api service and writes the service results to the http response
type PoolAPIController struct {
	service PoolAPIServicer
	errorHandler ErrorHandler
}

// PoolAPIOption for how the controller is set up.
type PoolAPIOption func(*PoolAPIController)

// WithPoolAPIErrorHandler inject ErrorHandler into controller
func WithPoolAPIErrorHandler(h ErrorHandler) PoolAPIOption {
	return func(c *PoolAPIController) {
		c.errorHandler = h
	}
}

// NewPoolAPIController creates a default api controller
func NewPoolAPIController(s PoolAPIServicer, opts ...PoolAPIOption) *PoolAPIController {
	controller := &PoolAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PoolAPIController
func (c *PoolAPIController) Routes() Routes {
	return Routes{
		"ListStoragePools": Route{
			strings.ToUpper("Get"),
			"/api/v1/pool",
			c.ListStoragePools,
		},
		"ReadStoragePool": Route{
			strings.ToUpper("Get"),
			"/api/v1/pool/{poolId}",
			c.ReadStoragePool,
		},
		"UpdateStoragePool": Route{
			strings.ToUpper("Put"),
			"/api/v1/pool/{poolId}",
			c.UpdateStoragePool,
		},
		"DeleteStoragePool": Route{
			strings.ToUpper("Delete"),
			"/api/v1/pool/{poolId}",
			c.DeleteStoragePool,
		},
		"ListStoragePoolVolumes": Route{
			strings.ToUpper("Get"),
			"/api/v1/pool/{poolId}/volumes",
			c.ListStoragePoolVolumes,
		},
		"CreateTemplate": Route{
			strings.ToUpper("Post"),
			"/api/v1/pool/{poolId}/template",
			c.CreateTemplate,
		},
		"SetStoragePoolDefaultTemplate": Route{
			strings.ToUpper("Patch"),
			"/api/v1/pool/{poolId}/template/{templateId}/default",
			c.SetStoragePoolDefaultTemplate,
		},
		"ListStoragePoolTemplates": Route{
			strings.ToUpper("Get"),
			"/api/v1/pool/{poolId}/templates",
			c.ListStoragePoolTemplates,
		},
	}
}

// ListStoragePools - 
func (c *PoolAPIController) ListStoragePools(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListStoragePools(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadStoragePool - 
func (c *PoolAPIController) ReadStoragePool(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	poolIdParam := params["poolId"]
	if poolIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"poolId"}, nil)
		return
	}
	result, err := c.service.ReadStoragePool(r.Context(), poolIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateStoragePool - 
func (c *PoolAPIController) UpdateStoragePool(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	poolIdParam := params["poolId"]
	if poolIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"poolId"}, nil)
		return
	}
	var storagePoolParam StoragePool
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&storagePoolParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertStoragePoolRequired(storagePoolParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertStoragePoolConstraints(storagePoolParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateStoragePool(r.Context(), poolIdParam, storagePoolParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteStoragePool - 
func (c *PoolAPIController) DeleteStoragePool(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	poolIdParam := params["poolId"]
	if poolIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"poolId"}, nil)
		return
	}
	result, err := c.service.DeleteStoragePool(r.Context(), poolIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListStoragePoolVolumes - 
func (c *PoolAPIController) ListStoragePoolVolumes(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	poolIdParam := params["poolId"]
	if poolIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"poolId"}, nil)
		return
	}
	result, err := c.service.ListStoragePoolVolumes(r.Context(), poolIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateTemplate - 
func (c *PoolAPIController) CreateTemplate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	poolIdParam := params["poolId"]
	if poolIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"poolId"}, nil)
		return
	}
	var templateParam Template
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&templateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTemplateRequired(templateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTemplateConstraints(templateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateTemplate(r.Context(), poolIdParam, templateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetStoragePoolDefaultTemplate - 
func (c *PoolAPIController) SetStoragePoolDefaultTemplate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	poolIdParam := params["poolId"]
	if poolIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"poolId"}, nil)
		return
	}
	templateIdParam := params["templateId"]
	if templateIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"templateId"}, nil)
		return
	}
	result, err := c.service.SetStoragePoolDefaultTemplate(r.Context(), poolIdParam, templateIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListStoragePoolTemplates - 
func (c *PoolAPIController) ListStoragePoolTemplates(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	poolIdParam := params["poolId"]
	if poolIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"poolId"}, nil)
		return
	}
	result, err := c.service.ListStoragePoolTemplates(r.Context(), poolIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
