// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Kowabunga API documentation
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 */

package sdk

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ProjectAPIController binds http requests to an api service and writes the service results to the http response
type ProjectAPIController struct {
	service ProjectAPIServicer
	errorHandler ErrorHandler
}

// ProjectAPIOption for how the controller is set up.
type ProjectAPIOption func(*ProjectAPIController)

// WithProjectAPIErrorHandler inject ErrorHandler into controller
func WithProjectAPIErrorHandler(h ErrorHandler) ProjectAPIOption {
	return func(c *ProjectAPIController) {
		c.errorHandler = h
	}
}

// NewProjectAPIController creates a default api controller
func NewProjectAPIController(s ProjectAPIServicer, opts ...ProjectAPIOption) *ProjectAPIController {
	controller := &ProjectAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ProjectAPIController
func (c *ProjectAPIController) Routes() Routes {
	return Routes{
		"ListProjects": Route{
			strings.ToUpper("Get"),
			"/api/v1/project",
			c.ListProjects,
		},
		"CreateProject": Route{
			strings.ToUpper("Post"),
			"/api/v1/project",
			c.CreateProject,
		},
		"ReadProject": Route{
			strings.ToUpper("Get"),
			"/api/v1/project/{projectId}",
			c.ReadProject,
		},
		"UpdateProject": Route{
			strings.ToUpper("Put"),
			"/api/v1/project/{projectId}",
			c.UpdateProject,
		},
		"DeleteProject": Route{
			strings.ToUpper("Delete"),
			"/api/v1/project/{projectId}",
			c.DeleteProject,
		},
		"ReadProjectCost": Route{
			strings.ToUpper("Get"),
			"/api/v1/project/{projectId}/cost",
			c.ReadProjectCost,
		},
		"ReadProjectUsage": Route{
			strings.ToUpper("Get"),
			"/api/v1/project/{projectId}/usage",
			c.ReadProjectUsage,
		},
		"CreateProjectDnsRecord": Route{
			strings.ToUpper("Post"),
			"/api/v1/project/{projectId}/record",
			c.CreateProjectDnsRecord,
		},
		"ListProjectDnsRecords": Route{
			strings.ToUpper("Get"),
			"/api/v1/project/{projectId}/records",
			c.ListProjectDnsRecords,
		},
		"CreateProjectRegionVolume": Route{
			strings.ToUpper("Post"),
			"/api/v1/project/{projectId}/region/{regionId}/volume",
			c.CreateProjectRegionVolume,
		},
		"ListProjectRegionVolumes": Route{
			strings.ToUpper("Get"),
			"/api/v1/project/{projectId}/region/{regionId}/volumes",
			c.ListProjectRegionVolumes,
		},
		"CreateProjectZoneInstance": Route{
			strings.ToUpper("Post"),
			"/api/v1/project/{projectId}/zone/{zoneId}/instance",
			c.CreateProjectZoneInstance,
		},
		"ListProjectZoneInstances": Route{
			strings.ToUpper("Get"),
			"/api/v1/project/{projectId}/zone/{zoneId}/instances",
			c.ListProjectZoneInstances,
		},
		"CreateProjectZoneKompute": Route{
			strings.ToUpper("Post"),
			"/api/v1/project/{projectId}/zone/{zoneId}/kompute",
			c.CreateProjectZoneKompute,
		},
		"ListProjectZoneKomputes": Route{
			strings.ToUpper("Get"),
			"/api/v1/project/{projectId}/zone/{zoneId}/komputes",
			c.ListProjectZoneKomputes,
		},
		"ListProjectRegionKylos": Route{
			strings.ToUpper("Get"),
			"/api/v1/project/{projectId}/region/{regionId}/kylo",
			c.ListProjectRegionKylos,
		},
		"CreateProjectRegionKylo": Route{
			strings.ToUpper("Post"),
			"/api/v1/project/{projectId}/region/{regionId}/kylo",
			c.CreateProjectRegionKylo,
		},
		"CreateProjectRegionKawaii": Route{
			strings.ToUpper("Post"),
			"/api/v1/project/{projectId}/region/{regionId}/kawaii",
			c.CreateProjectRegionKawaii,
		},
		"ListProjectRegionKawaiis": Route{
			strings.ToUpper("Get"),
			"/api/v1/project/{projectId}/region/{regionId}/kawaiis",
			c.ListProjectRegionKawaiis,
		},
		"CreateProjectZoneKonvey": Route{
			strings.ToUpper("Post"),
			"/api/v1/project/{projectId}/zone/{zoneId}/konvey",
			c.CreateProjectZoneKonvey,
		},
		"ListProjectZoneKonveys": Route{
			strings.ToUpper("Get"),
			"/api/v1/project/{projectId}/zone/{zoneId}/konveys",
			c.ListProjectZoneKonveys,
		},
		"CreateProjectRegionKonvey": Route{
			strings.ToUpper("Post"),
			"/api/v1/project/{projectId}/region/{regionId}/konvey",
			c.CreateProjectRegionKonvey,
		},
		"ListProjectRegionKonveys": Route{
			strings.ToUpper("Get"),
			"/api/v1/project/{projectId}/region/{regionId}/konveys",
			c.ListProjectRegionKonveys,
		},
	}
}

// ListProjects - 
func (c *ProjectAPIController) ListProjects(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var subnetSizeParam int32
	if query.Has("subnetSize") {
		param, err := parseNumericParameter[int32](
			query.Get("subnetSize"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "subnetSize", Err: err}, nil)
			return
		}

		subnetSizeParam = param
	} else {
	}
	result, err := c.service.ListProjects(r.Context(), subnetSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateProject - 
func (c *ProjectAPIController) CreateProject(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var projectParam Project
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&projectParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertProjectRequired(projectParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertProjectConstraints(projectParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var subnetSizeParam int32
	if query.Has("subnetSize") {
		param, err := parseNumericParameter[int32](
			query.Get("subnetSize"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "subnetSize", Err: err}, nil)
			return
		}

		subnetSizeParam = param
	} else {
	}
	result, err := c.service.CreateProject(r.Context(), projectParam, subnetSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadProject - 
func (c *ProjectAPIController) ReadProject(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	result, err := c.service.ReadProject(r.Context(), projectIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateProject - 
func (c *ProjectAPIController) UpdateProject(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	var projectParam Project
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&projectParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertProjectRequired(projectParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertProjectConstraints(projectParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateProject(r.Context(), projectIdParam, projectParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteProject - 
func (c *ProjectAPIController) DeleteProject(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	result, err := c.service.DeleteProject(r.Context(), projectIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadProjectCost - 
func (c *ProjectAPIController) ReadProjectCost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	result, err := c.service.ReadProjectCost(r.Context(), projectIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadProjectUsage - 
func (c *ProjectAPIController) ReadProjectUsage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	result, err := c.service.ReadProjectUsage(r.Context(), projectIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateProjectDnsRecord - 
func (c *ProjectAPIController) CreateProjectDnsRecord(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	var dnsRecordParam DnsRecord
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&dnsRecordParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDnsRecordRequired(dnsRecordParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDnsRecordConstraints(dnsRecordParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateProjectDnsRecord(r.Context(), projectIdParam, dnsRecordParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListProjectDnsRecords - 
func (c *ProjectAPIController) ListProjectDnsRecords(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	result, err := c.service.ListProjectDnsRecords(r.Context(), projectIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateProjectRegionVolume - 
func (c *ProjectAPIController) CreateProjectRegionVolume(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	regionIdParam := params["regionId"]
	if regionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"regionId"}, nil)
		return
	}
	var volumeParam Volume
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&volumeParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertVolumeRequired(volumeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertVolumeConstraints(volumeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var poolIdParam string
	if query.Has("poolId") {
		param := query.Get("poolId")

		poolIdParam = param
	} else {
	}
	var templateIdParam string
	if query.Has("templateId") {
		param := query.Get("templateId")

		templateIdParam = param
	} else {
	}
	result, err := c.service.CreateProjectRegionVolume(r.Context(), projectIdParam, regionIdParam, volumeParam, poolIdParam, templateIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListProjectRegionVolumes - 
func (c *ProjectAPIController) ListProjectRegionVolumes(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	regionIdParam := params["regionId"]
	if regionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"regionId"}, nil)
		return
	}
	result, err := c.service.ListProjectRegionVolumes(r.Context(), projectIdParam, regionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateProjectZoneInstance - 
func (c *ProjectAPIController) CreateProjectZoneInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	var instanceParam Instance
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&instanceParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertInstanceRequired(instanceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertInstanceConstraints(instanceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateProjectZoneInstance(r.Context(), projectIdParam, zoneIdParam, instanceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListProjectZoneInstances - 
func (c *ProjectAPIController) ListProjectZoneInstances(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.ListProjectZoneInstances(r.Context(), projectIdParam, zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateProjectZoneKompute - 
func (c *ProjectAPIController) CreateProjectZoneKompute(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	var komputeParam Kompute
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&komputeParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKomputeRequired(komputeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKomputeConstraints(komputeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var poolIdParam string
	if query.Has("poolId") {
		param := query.Get("poolId")

		poolIdParam = param
	} else {
	}
	var templateIdParam string
	if query.Has("templateId") {
		param := query.Get("templateId")

		templateIdParam = param
	} else {
	}
	var publicParam bool
	if query.Has("public") {
		param, err := parseBoolParameter(
			query.Get("public"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "public", Err: err}, nil)
			return
		}

		publicParam = param
	} else {
	}
	result, err := c.service.CreateProjectZoneKompute(r.Context(), projectIdParam, zoneIdParam, komputeParam, poolIdParam, templateIdParam, publicParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListProjectZoneKomputes - 
func (c *ProjectAPIController) ListProjectZoneKomputes(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.ListProjectZoneKomputes(r.Context(), projectIdParam, zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListProjectRegionKylos - 
func (c *ProjectAPIController) ListProjectRegionKylos(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	regionIdParam := params["regionId"]
	if regionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"regionId"}, nil)
		return
	}
	var nfsIdParam string
	if query.Has("nfsId") {
		param := query.Get("nfsId")

		nfsIdParam = param
	} else {
	}
	result, err := c.service.ListProjectRegionKylos(r.Context(), projectIdParam, regionIdParam, nfsIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateProjectRegionKylo - 
func (c *ProjectAPIController) CreateProjectRegionKylo(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	regionIdParam := params["regionId"]
	if regionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"regionId"}, nil)
		return
	}
	var kyloParam Kylo
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&kyloParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKyloRequired(kyloParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKyloConstraints(kyloParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var nfsIdParam string
	if query.Has("nfsId") {
		param := query.Get("nfsId")

		nfsIdParam = param
	} else {
	}
	result, err := c.service.CreateProjectRegionKylo(r.Context(), projectIdParam, regionIdParam, kyloParam, nfsIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateProjectRegionKawaii - 
func (c *ProjectAPIController) CreateProjectRegionKawaii(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	regionIdParam := params["regionId"]
	if regionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"regionId"}, nil)
		return
	}
	var kawaiiParam Kawaii
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&kawaiiParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKawaiiRequired(kawaiiParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKawaiiConstraints(kawaiiParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateProjectRegionKawaii(r.Context(), projectIdParam, regionIdParam, kawaiiParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListProjectRegionKawaiis - 
func (c *ProjectAPIController) ListProjectRegionKawaiis(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	regionIdParam := params["regionId"]
	if regionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"regionId"}, nil)
		return
	}
	result, err := c.service.ListProjectRegionKawaiis(r.Context(), projectIdParam, regionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateProjectZoneKonvey - 
func (c *ProjectAPIController) CreateProjectZoneKonvey(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	var konveyParam Konvey
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&konveyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKonveyRequired(konveyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKonveyConstraints(konveyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateProjectZoneKonvey(r.Context(), projectIdParam, zoneIdParam, konveyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListProjectZoneKonveys - 
func (c *ProjectAPIController) ListProjectZoneKonveys(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.ListProjectZoneKonveys(r.Context(), projectIdParam, zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateProjectRegionKonvey - 
func (c *ProjectAPIController) CreateProjectRegionKonvey(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	regionIdParam := params["regionId"]
	if regionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"regionId"}, nil)
		return
	}
	var konveyParam Konvey
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&konveyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKonveyRequired(konveyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKonveyConstraints(konveyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateProjectRegionKonvey(r.Context(), projectIdParam, regionIdParam, konveyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListProjectRegionKonveys - 
func (c *ProjectAPIController) ListProjectRegionKonveys(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	regionIdParam := params["regionId"]
	if regionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"regionId"}, nil)
		return
	}
	result, err := c.service.ListProjectRegionKonveys(r.Context(), projectIdParam, regionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
