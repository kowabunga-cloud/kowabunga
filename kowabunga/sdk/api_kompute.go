// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Kowabunga API
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.53.2
 * Contact: maintainers@kowabunga.cloud
 */

package sdk

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// KomputeAPIController binds http requests to an api service and writes the service results to the http response
type KomputeAPIController struct {
	service KomputeAPIServicer
	errorHandler ErrorHandler
}

// KomputeAPIOption for how the controller is set up.
type KomputeAPIOption func(*KomputeAPIController)

// WithKomputeAPIErrorHandler inject ErrorHandler into controller
func WithKomputeAPIErrorHandler(h ErrorHandler) KomputeAPIOption {
	return func(c *KomputeAPIController) {
		c.errorHandler = h
	}
}

// NewKomputeAPIController creates a default api controller
func NewKomputeAPIController(s KomputeAPIServicer, opts ...KomputeAPIOption) *KomputeAPIController {
	controller := &KomputeAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the KomputeAPIController
func (c *KomputeAPIController) Routes() Routes {
	return Routes{
		"ListKomputes": Route{
			"ListKomputes",
			strings.ToUpper("Get"),
			"/api/v1/kompute",
			c.ListKomputes,
		},
		"ReadKompute": Route{
			"ReadKompute",
			strings.ToUpper("Get"),
			"/api/v1/kompute/{komputeId}",
			c.ReadKompute,
		},
		"UpdateKompute": Route{
			"UpdateKompute",
			strings.ToUpper("Put"),
			"/api/v1/kompute/{komputeId}",
			c.UpdateKompute,
		},
		"DeleteKompute": Route{
			"DeleteKompute",
			strings.ToUpper("Delete"),
			"/api/v1/kompute/{komputeId}",
			c.DeleteKompute,
		},
		"ReadKomputeState": Route{
			"ReadKomputeState",
			strings.ToUpper("Get"),
			"/api/v1/kompute/{komputeId}/state",
			c.ReadKomputeState,
		},
		"RebootKompute": Route{
			"RebootKompute",
			strings.ToUpper("Patch"),
			"/api/v1/kompute/{komputeId}/reboot",
			c.RebootKompute,
		},
		"ResetKompute": Route{
			"ResetKompute",
			strings.ToUpper("Patch"),
			"/api/v1/kompute/{komputeId}/reset",
			c.ResetKompute,
		},
		"SuspendKompute": Route{
			"SuspendKompute",
			strings.ToUpper("Patch"),
			"/api/v1/kompute/{komputeId}/suspend",
			c.SuspendKompute,
		},
		"ResumeKompute": Route{
			"ResumeKompute",
			strings.ToUpper("Patch"),
			"/api/v1/kompute/{komputeId}/resume",
			c.ResumeKompute,
		},
		"StartKompute": Route{
			"StartKompute",
			strings.ToUpper("Patch"),
			"/api/v1/kompute/{komputeId}/start",
			c.StartKompute,
		},
		"StopKompute": Route{
			"StopKompute",
			strings.ToUpper("Patch"),
			"/api/v1/kompute/{komputeId}/stop",
			c.StopKompute,
		},
		"ShutdownKompute": Route{
			"ShutdownKompute",
			strings.ToUpper("Patch"),
			"/api/v1/kompute/{komputeId}/shutdown",
			c.ShutdownKompute,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the KomputeAPIController
func (c *KomputeAPIController) OrderedRoutes() []Route {
	return []Route{
		Route{
			"ListKomputes",
			strings.ToUpper("Get"),
			"/api/v1/kompute",
			c.ListKomputes,
		},
		Route{
			"ReadKompute",
			strings.ToUpper("Get"),
			"/api/v1/kompute/{komputeId}",
			c.ReadKompute,
		},
		Route{
			"UpdateKompute",
			strings.ToUpper("Put"),
			"/api/v1/kompute/{komputeId}",
			c.UpdateKompute,
		},
		Route{
			"DeleteKompute",
			strings.ToUpper("Delete"),
			"/api/v1/kompute/{komputeId}",
			c.DeleteKompute,
		},
		Route{
			"ReadKomputeState",
			strings.ToUpper("Get"),
			"/api/v1/kompute/{komputeId}/state",
			c.ReadKomputeState,
		},
		Route{
			"RebootKompute",
			strings.ToUpper("Patch"),
			"/api/v1/kompute/{komputeId}/reboot",
			c.RebootKompute,
		},
		Route{
			"ResetKompute",
			strings.ToUpper("Patch"),
			"/api/v1/kompute/{komputeId}/reset",
			c.ResetKompute,
		},
		Route{
			"SuspendKompute",
			strings.ToUpper("Patch"),
			"/api/v1/kompute/{komputeId}/suspend",
			c.SuspendKompute,
		},
		Route{
			"ResumeKompute",
			strings.ToUpper("Patch"),
			"/api/v1/kompute/{komputeId}/resume",
			c.ResumeKompute,
		},
		Route{
			"StartKompute",
			strings.ToUpper("Patch"),
			"/api/v1/kompute/{komputeId}/start",
			c.StartKompute,
		},
		Route{
			"StopKompute",
			strings.ToUpper("Patch"),
			"/api/v1/kompute/{komputeId}/stop",
			c.StopKompute,
		},
		Route{
			"ShutdownKompute",
			strings.ToUpper("Patch"),
			"/api/v1/kompute/{komputeId}/shutdown",
			c.ShutdownKompute,
		},
	}
}



// ListKomputes - 
func (c *KomputeAPIController) ListKomputes(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListKomputes(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadKompute - 
func (c *KomputeAPIController) ReadKompute(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	komputeIdParam := params["komputeId"]
	if komputeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"komputeId"}, nil)
		return
	}
	result, err := c.service.ReadKompute(r.Context(), komputeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateKompute - 
func (c *KomputeAPIController) UpdateKompute(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	komputeIdParam := params["komputeId"]
	if komputeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"komputeId"}, nil)
		return
	}
	var komputeParam Kompute
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&komputeParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKomputeRequired(komputeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKomputeConstraints(komputeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateKompute(r.Context(), komputeIdParam, komputeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteKompute - 
func (c *KomputeAPIController) DeleteKompute(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	komputeIdParam := params["komputeId"]
	if komputeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"komputeId"}, nil)
		return
	}
	result, err := c.service.DeleteKompute(r.Context(), komputeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadKomputeState - 
func (c *KomputeAPIController) ReadKomputeState(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	komputeIdParam := params["komputeId"]
	if komputeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"komputeId"}, nil)
		return
	}
	result, err := c.service.ReadKomputeState(r.Context(), komputeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RebootKompute - 
func (c *KomputeAPIController) RebootKompute(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	komputeIdParam := params["komputeId"]
	if komputeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"komputeId"}, nil)
		return
	}
	result, err := c.service.RebootKompute(r.Context(), komputeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ResetKompute - 
func (c *KomputeAPIController) ResetKompute(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	komputeIdParam := params["komputeId"]
	if komputeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"komputeId"}, nil)
		return
	}
	result, err := c.service.ResetKompute(r.Context(), komputeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SuspendKompute - 
func (c *KomputeAPIController) SuspendKompute(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	komputeIdParam := params["komputeId"]
	if komputeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"komputeId"}, nil)
		return
	}
	result, err := c.service.SuspendKompute(r.Context(), komputeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ResumeKompute - 
func (c *KomputeAPIController) ResumeKompute(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	komputeIdParam := params["komputeId"]
	if komputeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"komputeId"}, nil)
		return
	}
	result, err := c.service.ResumeKompute(r.Context(), komputeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// StartKompute - 
func (c *KomputeAPIController) StartKompute(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	komputeIdParam := params["komputeId"]
	if komputeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"komputeId"}, nil)
		return
	}
	result, err := c.service.StartKompute(r.Context(), komputeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// StopKompute - 
func (c *KomputeAPIController) StopKompute(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	komputeIdParam := params["komputeId"]
	if komputeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"komputeId"}, nil)
		return
	}
	result, err := c.service.StopKompute(r.Context(), komputeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ShutdownKompute - 
func (c *KomputeAPIController) ShutdownKompute(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	komputeIdParam := params["komputeId"]
	if komputeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"komputeId"}, nil)
		return
	}
	result, err := c.service.ShutdownKompute(r.Context(), komputeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
