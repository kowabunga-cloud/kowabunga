// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Kowabunga API documentation
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 */

package sdk

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// TeamAPIController binds http requests to an api service and writes the service results to the http response
type TeamAPIController struct {
	service TeamAPIServicer
	errorHandler ErrorHandler
}

// TeamAPIOption for how the controller is set up.
type TeamAPIOption func(*TeamAPIController)

// WithTeamAPIErrorHandler inject ErrorHandler into controller
func WithTeamAPIErrorHandler(h ErrorHandler) TeamAPIOption {
	return func(c *TeamAPIController) {
		c.errorHandler = h
	}
}

// NewTeamAPIController creates a default api controller
func NewTeamAPIController(s TeamAPIServicer, opts ...TeamAPIOption) *TeamAPIController {
	controller := &TeamAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TeamAPIController
func (c *TeamAPIController) Routes() Routes {
	return Routes{
		"ListTeams": Route{
			strings.ToUpper("Get"),
			"/api/v1/team",
			c.ListTeams,
		},
		"CreateTeam": Route{
			strings.ToUpper("Post"),
			"/api/v1/team",
			c.CreateTeam,
		},
		"ReadTeam": Route{
			strings.ToUpper("Get"),
			"/api/v1/team/{teamId}",
			c.ReadTeam,
		},
		"UpdateTeam": Route{
			strings.ToUpper("Put"),
			"/api/v1/team/{teamId}",
			c.UpdateTeam,
		},
		"DeleteTeam": Route{
			strings.ToUpper("Delete"),
			"/api/v1/team/{teamId}",
			c.DeleteTeam,
		},
	}
}

// ListTeams - 
func (c *TeamAPIController) ListTeams(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListTeams(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateTeam - 
func (c *TeamAPIController) CreateTeam(w http.ResponseWriter, r *http.Request) {
	var teamParam Team
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&teamParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTeamRequired(teamParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTeamConstraints(teamParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateTeam(r.Context(), teamParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadTeam - 
func (c *TeamAPIController) ReadTeam(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	teamIdParam := params["teamId"]
	if teamIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"teamId"}, nil)
		return
	}
	result, err := c.service.ReadTeam(r.Context(), teamIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateTeam - 
func (c *TeamAPIController) UpdateTeam(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	teamIdParam := params["teamId"]
	if teamIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"teamId"}, nil)
		return
	}
	var teamParam Team
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&teamParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTeamRequired(teamParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTeamConstraints(teamParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateTeam(r.Context(), teamIdParam, teamParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteTeam - 
func (c *TeamAPIController) DeleteTeam(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	teamIdParam := params["teamId"]
	if teamIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"teamId"}, nil)
		return
	}
	result, err := c.service.DeleteTeam(r.Context(), teamIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
