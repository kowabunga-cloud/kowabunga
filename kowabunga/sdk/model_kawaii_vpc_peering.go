// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Kowabunga API
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.53.2
 * Contact: maintainers@kowabunga.cloud
 */

package sdk




// KawaiiVpcPeering - A Kawaii internal VPC subnet peering.
type KawaiiVpcPeering struct {

	// Kowabunga Subnet ID to be peered with (subnet local IP addresses will be automatically assigned to Kawaii instances)..
	Subnet string `json:"subnet"`

	// The default VPC traffic forwarding policy.
	Policy string `json:"policy,omitempty"`

	// The firewall list of forwarding ingress rules from VPC peered subnet. ICMP traffic is always accepted. The specified ruleset will be explicitly accepted if drop is the default policy (useless otherwise).
	Ingress []KawaiiVpcForwardRule `json:"ingress,omitempty"`

	// The firewall list of forwarding egress rules to VPC peered subnet. ICMP traffic is always accepted. The specified ruleset will be explicitly accepted if drop is the default policy (useless otherwise).
	Egress []KawaiiVpcForwardRule `json:"egress,omitempty"`

	// The per-zone auto-assigned private IPs in peered subnet (read-only).
	Netip []KawaiiVpcNetIpZone `json:"netip,omitempty"`
}

// AssertKawaiiVpcPeeringRequired checks if the required fields are not zero-ed
func AssertKawaiiVpcPeeringRequired(obj KawaiiVpcPeering) error {
	elements := map[string]interface{}{
		"subnet": obj.Subnet,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Ingress {
		if err := AssertKawaiiVpcForwardRuleRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Egress {
		if err := AssertKawaiiVpcForwardRuleRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Netip {
		if err := AssertKawaiiVpcNetIpZoneRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertKawaiiVpcPeeringConstraints checks if the values respects the defined constraints
func AssertKawaiiVpcPeeringConstraints(obj KawaiiVpcPeering) error {
	for _, el := range obj.Ingress {
		if err := AssertKawaiiVpcForwardRuleConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Egress {
		if err := AssertKawaiiVpcForwardRuleConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Netip {
		if err := AssertKawaiiVpcNetIpZoneConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
