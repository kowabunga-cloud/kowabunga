// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Kowabunga API documentation
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.52.5
 * Contact: maintainers@kowabunga.cloud
 */

package sdk

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// UserAPIController binds http requests to an api service and writes the service results to the http response
type UserAPIController struct {
	service UserAPIServicer
	errorHandler ErrorHandler
}

// UserAPIOption for how the controller is set up.
type UserAPIOption func(*UserAPIController)

// WithUserAPIErrorHandler inject ErrorHandler into controller
func WithUserAPIErrorHandler(h ErrorHandler) UserAPIOption {
	return func(c *UserAPIController) {
		c.errorHandler = h
	}
}

// NewUserAPIController creates a default api controller
func NewUserAPIController(s UserAPIServicer, opts ...UserAPIOption) *UserAPIController {
	controller := &UserAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the UserAPIController
func (c *UserAPIController) Routes() Routes {
	return Routes{
		"Login": Route{
			strings.ToUpper("Post"),
			"/api/v1/login",
			c.Login,
		},
		"Logout": Route{
			strings.ToUpper("Post"),
			"/api/v1/logout",
			c.Logout,
		},
		"ResetPassword": Route{
			strings.ToUpper("Put"),
			"/api/v1/resetPassword",
			c.ResetPassword,
		},
		"ListUsers": Route{
			strings.ToUpper("Get"),
			"/api/v1/user",
			c.ListUsers,
		},
		"CreateUser": Route{
			strings.ToUpper("Post"),
			"/api/v1/user",
			c.CreateUser,
		},
		"ReadUser": Route{
			strings.ToUpper("Get"),
			"/api/v1/user/{userId}",
			c.ReadUser,
		},
		"UpdateUser": Route{
			strings.ToUpper("Put"),
			"/api/v1/user/{userId}",
			c.UpdateUser,
		},
		"DeleteUser": Route{
			strings.ToUpper("Delete"),
			"/api/v1/user/{userId}",
			c.DeleteUser,
		},
		"SetUserPassword": Route{
			strings.ToUpper("Put"),
			"/api/v1/user/{userId}/password",
			c.SetUserPassword,
		},
		"ResetUserPassword": Route{
			strings.ToUpper("Patch"),
			"/api/v1/user/{userId}/resetPassword",
			c.ResetUserPassword,
		},
		"SetUserApiToken": Route{
			strings.ToUpper("Patch"),
			"/api/v1/user/{userId}/token",
			c.SetUserApiToken,
		},
	}
}

// Login - 
func (c *UserAPIController) Login(w http.ResponseWriter, r *http.Request) {
	var userCredentialsParam UserCredentials
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&userCredentialsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserCredentialsRequired(userCredentialsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserCredentialsConstraints(userCredentialsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.Login(r.Context(), userCredentialsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// Logout - 
func (c *UserAPIController) Logout(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.Logout(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ResetPassword - 
func (c *UserAPIController) ResetPassword(w http.ResponseWriter, r *http.Request) {
	var userEmailParam UserEmail
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&userEmailParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserEmailRequired(userEmailParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserEmailConstraints(userEmailParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ResetPassword(r.Context(), userEmailParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListUsers - 
func (c *UserAPIController) ListUsers(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListUsers(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateUser - 
func (c *UserAPIController) CreateUser(w http.ResponseWriter, r *http.Request) {
	var userParam User
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&userParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserRequired(userParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserConstraints(userParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateUser(r.Context(), userParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadUser - 
func (c *UserAPIController) ReadUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	result, err := c.service.ReadUser(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateUser - 
func (c *UserAPIController) UpdateUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	var userParam User
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&userParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserRequired(userParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserConstraints(userParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateUser(r.Context(), userIdParam, userParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteUser - 
func (c *UserAPIController) DeleteUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	result, err := c.service.DeleteUser(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetUserPassword - 
func (c *UserAPIController) SetUserPassword(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	var passwordParam Password
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&passwordParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPasswordRequired(passwordParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPasswordConstraints(passwordParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetUserPassword(r.Context(), userIdParam, passwordParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ResetUserPassword - 
func (c *UserAPIController) ResetUserPassword(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	result, err := c.service.ResetUserPassword(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetUserApiToken - 
func (c *UserAPIController) SetUserApiToken(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	var expireParam bool
	if query.Has("expire") {
		param, err := parseBoolParameter(
			query.Get("expire"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "expire", Err: err}, nil)
			return
		}

		expireParam = param
	} else {
	}
	var expirationDateParam string
	if query.Has("expiration_date") {
		param := string(query.Get("expiration_date"))

		expirationDateParam = param
	} else {
	}
	result, err := c.service.SetUserApiToken(r.Context(), userIdParam, expireParam, expirationDateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
