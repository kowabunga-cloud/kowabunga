// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Kowabunga API
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.53.1
 * Contact: maintainers@kowabunga.cloud
 */

package sdk

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// KaktusAPIController binds http requests to an api service and writes the service results to the http response
type KaktusAPIController struct {
	service KaktusAPIServicer
	errorHandler ErrorHandler
}

// KaktusAPIOption for how the controller is set up.
type KaktusAPIOption func(*KaktusAPIController)

// WithKaktusAPIErrorHandler inject ErrorHandler into controller
func WithKaktusAPIErrorHandler(h ErrorHandler) KaktusAPIOption {
	return func(c *KaktusAPIController) {
		c.errorHandler = h
	}
}

// NewKaktusAPIController creates a default api controller
func NewKaktusAPIController(s KaktusAPIServicer, opts ...KaktusAPIOption) *KaktusAPIController {
	controller := &KaktusAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the KaktusAPIController
func (c *KaktusAPIController) Routes() Routes {
	return Routes{
		"ListKaktuss": Route{
			"ListKaktuss",
			strings.ToUpper("Get"),
			"/api/v1/kaktus",
			c.ListKaktuss,
		},
		"ReadKaktus": Route{
			"ReadKaktus",
			strings.ToUpper("Get"),
			"/api/v1/kaktus/{kaktusId}",
			c.ReadKaktus,
		},
		"UpdateKaktus": Route{
			"UpdateKaktus",
			strings.ToUpper("Put"),
			"/api/v1/kaktus/{kaktusId}",
			c.UpdateKaktus,
		},
		"DeleteKaktus": Route{
			"DeleteKaktus",
			strings.ToUpper("Delete"),
			"/api/v1/kaktus/{kaktusId}",
			c.DeleteKaktus,
		},
		"ReadKaktusCaps": Route{
			"ReadKaktusCaps",
			strings.ToUpper("Get"),
			"/api/v1/kaktus/{kaktusId}/caps",
			c.ReadKaktusCaps,
		},
		"ListKaktusInstances": Route{
			"ListKaktusInstances",
			strings.ToUpper("Get"),
			"/api/v1/kaktus/{kaktusId}/instances",
			c.ListKaktusInstances,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the KaktusAPIController
func (c *KaktusAPIController) OrderedRoutes() []Route {
	return []Route{
		Route{
			"ListKaktuss",
			strings.ToUpper("Get"),
			"/api/v1/kaktus",
			c.ListKaktuss,
		},
		Route{
			"ReadKaktus",
			strings.ToUpper("Get"),
			"/api/v1/kaktus/{kaktusId}",
			c.ReadKaktus,
		},
		Route{
			"UpdateKaktus",
			strings.ToUpper("Put"),
			"/api/v1/kaktus/{kaktusId}",
			c.UpdateKaktus,
		},
		Route{
			"DeleteKaktus",
			strings.ToUpper("Delete"),
			"/api/v1/kaktus/{kaktusId}",
			c.DeleteKaktus,
		},
		Route{
			"ReadKaktusCaps",
			strings.ToUpper("Get"),
			"/api/v1/kaktus/{kaktusId}/caps",
			c.ReadKaktusCaps,
		},
		Route{
			"ListKaktusInstances",
			strings.ToUpper("Get"),
			"/api/v1/kaktus/{kaktusId}/instances",
			c.ListKaktusInstances,
		},
	}
}



// ListKaktuss - 
func (c *KaktusAPIController) ListKaktuss(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListKaktuss(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadKaktus - 
func (c *KaktusAPIController) ReadKaktus(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kaktusIdParam := params["kaktusId"]
	if kaktusIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kaktusId"}, nil)
		return
	}
	result, err := c.service.ReadKaktus(r.Context(), kaktusIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateKaktus - 
func (c *KaktusAPIController) UpdateKaktus(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kaktusIdParam := params["kaktusId"]
	if kaktusIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kaktusId"}, nil)
		return
	}
	var kaktusParam Kaktus
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&kaktusParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKaktusRequired(kaktusParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKaktusConstraints(kaktusParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateKaktus(r.Context(), kaktusIdParam, kaktusParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteKaktus - 
func (c *KaktusAPIController) DeleteKaktus(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kaktusIdParam := params["kaktusId"]
	if kaktusIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kaktusId"}, nil)
		return
	}
	result, err := c.service.DeleteKaktus(r.Context(), kaktusIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadKaktusCaps - 
func (c *KaktusAPIController) ReadKaktusCaps(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kaktusIdParam := params["kaktusId"]
	if kaktusIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kaktusId"}, nil)
		return
	}
	result, err := c.service.ReadKaktusCaps(r.Context(), kaktusIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListKaktusInstances - 
func (c *KaktusAPIController) ListKaktusInstances(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kaktusIdParam := params["kaktusId"]
	if kaktusIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kaktusId"}, nil)
		return
	}
	result, err := c.service.ListKaktusInstances(r.Context(), kaktusIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
